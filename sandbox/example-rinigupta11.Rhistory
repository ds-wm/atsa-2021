5+3
a >- 2
a <- 2
a <- a+a
?
mean
mean(2, 5)
c([2, 3, 4])
c(2, 3, 4)
vec <- c(2, 3, 4,)
vec <- c(2, 3, 4)
vec[1]
vec[3]
mean(vec)
print(arithmetic_mean(c[2, 3, 6]))
arithmetic_mean <- function(numbers) {
sum <- 0
for (num in numbers) {
sum <- sum + num
}
return sum/length(numbers)
}
arithmetic_mean(c[2, 3, 6])
arithmetic_mean <- function(numbers) {
sum <- 0
for (num in numbers) {
sum <- sum + num
}
return sum/length(numbers)
}
arithmetic_mean <- function(numbers) {
sum <- 0
for (num in numbers) {
sum <- sum + num
}
return sum
}
arithmetic_mean <- function(numbers) {
sum <- 0
for (num in numbers) {
sum <- sum + num
}
return(sum)
}
arithmetic_mean(c[2, 3, 6])
vec <- c(2, 3, 5)
mean(vec)
arithmetic_mean(c(2, 3, 6))
return(sum/length(numbers))
arithmetic_mean <- function(numbers) {
sum <- 0
for (num in numbers) {
sum <- sum + num
}
return(sum/length(numbers))
}
arithmetic_mean(c(2, 3, 6))
arithmetic_mean(c(2, 3, 7))
mean(c(2, 3, 7))
geometric_mean(vec)
clear
cls
geometric_mean <- function(numbers) {
product <- 1
for (num in numbers) {
product <- product*num
}
return(product^(-1*length(numbers)))
}
geometric_mean(vec)
vec
return(product)
geometric_mean <- function(numbers) {
product <- 1
for (num in numbers) {
product <- product*num
}
return(product)
}
geometric_mean(vec)
16^(-2)
16^(/2)
16^(1/2)
product <- 1
for (num in numbers) {
product <- product*num
}
return(product^(1/length(numbers)))
}
geometric_mean <- function(numbers) {
product <- 1
for (num in numbers) {
product <- product*num
}
return(product^(1/length(numbers)))
}
geometric_mean(vec)
geoMean(vec)
geomean(vec)
var(vec)
variance <- function(numbers) {
sample_mean <- arithmetic_mean(numbers)
squared_diff <- 0
for (num in numbers) {
squared_diff <- (num-sample_mean)^2 + squared_diff
}
return(squared_diff/(length(numbers)-1))
}
variance(vec)
standard_deviation <- function(numbers) {
return(var^(1/2))
}
standard_deviation(vec)
standard_deviation <- function(numbers) {
return(variance(numbers)^(1/2))
}
standard_deviation(vec)
sd(vec)
standard_error <- function(numbers) {
return(variance(numbers)/length(numbers)^(1/2))
}
standard_error(vec)
std.error(vec)
se(vec)
library("plotrix")
savehistory(file - "example-rinigupta11.Rhistory")
savehistory(file - "example-rinigupta11.Rhistory")
savehistory(file - "example_rinigupta11.Rhistory")
savehistory(file - "example_rinigupta11.Rhistory")
getwd()
savehistory(file = "example-rinigupta11.Rhistory")
