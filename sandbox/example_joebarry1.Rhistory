load("~/MATH 352/Exercises&Examples/EX7_20.Rdata")
View(EX7_20)
plot(EX7_20$X, EX7_20$Y)
plot(EX7_20$X, EX7_20$Y, xlab = 'X', ylab = 'y')
plot(I(log(EX7_20$X)), I(log(EX7_20$Y)), xlab = 'X', ylab = 'y')
plot(I(log(EX7_20$X)), I(log(EX7_20$Y)), xlab = 'ln(x)', ylab = 'ln(y)')
modln <- lm(I(log(Y)) ~ I(log(X)), data = EX7_20)
summary(modln)
predict(modln, newdata = X = 30)
predict(modln, newdata = (X = 30))
predict(modln, X = 30)
new.X <- data.frame(X=c(30))
predict(modln, newdata = new.X)
load("~/MATH 352/Exercises&Examples/HAMILTON.Rdata")
View(HAMILTON)
cor(HAMILTON$X1, HAMILTON$Y)
plot(HAMILTON$X1, HAMILTON$Y)
cor(HAMILTON$X2, HAMILTON$Y)
plot(HAMILTON$X2, HAMILTON$Y)
cor(I(-HAMILTON$X2), HAMILTON$Y)
modham <- lm(Y ~ X1 + X2, data = HAMILTON)
summary(modham)
cor(HAMILTON$X1, HAMILTON$X2)
load("~/MATH 352/Exercises&Examples/EX8_2.Rdata")
View(EX8_2)
modresex <- lm(Y ~ X, data = EX8_2)
summary(modresex)
load("~/MATH 352/Exercises&Examples/TIRES.Rdata")
View(TIRES)
modtires <- lm(MILEAGE_Y ~ ., data = TIRES)
summary(modtires)
modtires$residuals
plot(TIRES$PRESS_X, modtires$residuals)
plot(TIRES$PRESS_X, TIRES$MILEAGE_Y)
plot(TIRES$PRESS_X, modtires$residuals)
plot(TIRES$PRESS_X, TIRES$MILEAGE_Y)
plot(TIRES$PRESS_X, modtires$residuals)
modtires2 <- lm(MILAGE_Y ~ PRESS_ X + I(PRESS_X^2), data = TIRES)
modtires2 <- lm(MILAGE_Y ~ PRESS_X + I(PRESS_X^2), data = TIRES)
modtires2 <- lm(MILEAGE_Y ~ PRESS_X + I(PRESS_X^2), data = TIRES)
summary(modtires2)
qqnorm(modtires2$residuals, ylab="Standardized Residuals", xlab="Normal Scores")
qqline(modtires2$residuals)
View(modins)
summary(modins)
plot(insurance$smoker, insurance$charges)
plot(insurance$smoker, insurance$charges, xlab = 'X', ylab = 'y')
plot(insurance$children, insurance$charges, xlab = 'X', ylab = 'y')
qqnorm(modins$residuals, ylab="Standardized Residuals", xlab="Normal Scores")
qqline(modins$residuals)
modip <- (charges ~ smoker * age, data = insurance)
modip <- lm(charges ~ smoker * age, data = insurance)
summary(modip)
modip <- lm(charges ~ smoker + age, data = insurance)
summary(modip)
step(min.model, scope = formula(modins), direction = "forward")
modip <- lm(charges ~ smoker * sex, data = insurance)
summary(modip)
modip <- lm(charges ~ smoker, data = insurance)
summary(modip)
modip <- lm(charges ~ smoker * age, data = insurance)
summary(modip)
modip <- lm(charges ~ smoker * sex, data = insurance)
summary(modip)
summary(modins)
summary(modip)
step(modins, direction = 'backward')
install.packages("car")
install.packages("car")
library(car)
library(car)
library('car')
install.packages("car")
vif(modins)
library(car)
install.packages("car")
install.packages("installr")
library(installr)
library(installr)
updateR()
install.packages("car")
library(car)
vif(modins)
modvif <- lm(charges ~ age + sex + bmi + children + smoker, data = insurance)
vif(modvif)
library(mctest)
install.packages("mctest")
library(mctest)
VIF(modins, all.diagnostics=TRUE)
VIF <- function(linear.model, no.intercept=FALSE, all.diagnostics=FALSE, plot=FALSE) {
require(mctest)
if(no.intercept==FALSE) design.matrix <- model.matrix(linear.model)[,-1]
if(no.intercept==TRUE) design.matrix <- model.matrix(linear.model)
if(plot==TRUE) mc.plot(design.matrix,linear.model$model[1])
if(all.diagnostics==FALSE) output <- imcdiag(design.matrix,linear.model$model[1], method='VIF')$idiags[,1]
if(all.diagnostics==TRUE) output <- imcdiag(design.matrix,linear.model$model[1])
output
}
VIF(modins, all.diagnostics=TRUE)
mc.plot(modins, Inter = F, vif = 1)
vif(modvif)
plot(insurance$age, insurance$charges, xlab = 'X', ylab = 'y')
plot(insurance$sex, insurance$charges, xlab = 'X', ylab = 'y')
plot(insurance$bmi, insurance$charges, xlab = 'X', ylab = 'y')
plot(insurance$bmi, insurance$charges, xlab = 'X', ylab = 'y')
qqline(modins$residuals)
qqnorm(modins$residuals, ylab="Standardized Residuals", xlab="Normal Scores")
qqline(modins$residuals)
yhat1 <- predict(modins)
diff1 <- insurance$charges-yhat1
cbind(insurance$charges, yhat1, diff1, modins$residuals)
plot(diff1, modins$residuals)
plot(yhat1, modins$residuals)
smokedata <- subset(insurance, smoker == yes)
nosmokedata <- subset(insurance, smoker == no)
smokedata <- subset(insurance, smoker == 'yes')
nosmokedata <- subset(insurance, smoker == 'no')
modsmoke <- lm(charges ~ . - smoker, data = insurance)
summary(modsmoke)
yhat2 <- predict(modsmoke)
plot(yhat2, modsmoke$residuals)
qqnorm(modsmoke$residuals, ylab="Standardized Residuals", xlab="Normal Scores")
qqline(modsmoke$residuals)
summary(modins)
summary(modsmoke)
modnosmoke <- lm(charges ~ . - smoker, data = insurance)
summary(modnosmoke)
modsmoke <- lm(charges ~ . - smoker, data = smokedata)
modsmoke <- lm(charges ~ age + bmi + children + region, data = smokedata)
summary(modsmoke)
modsmoke <- lm(charges ~ age + bmi + region, data = smokedata)
summary(modsmoke)
modnosmoke <- lm(charges ~ . - smoker - sex, data = nosmokedata)
modnosmoke <- lm(charges ~ age + bmi + region, data = nosmokedata)
summary(modnosmoke)
qqnorm(modnosmoke$residuals, ylab="Standardized Residuals", xlab="Normal Scores")
qqline(modnosmoke$residuals)
modins2nd <- lm(charges ~ age * smoker + I(age^2) + bmi * smoker + I(bmi^2) + region * smoker, data = insurance)
summary(modins2nd)
step(min.model, scope = formula(modins2nd), direction = "forward")
step(modins2nd, direction = 'backward')
summary(modins2nd)
anova(modins, modins2nd)
modins <- lm(charges ~ age + bmi + children + smoker + region, data = insurance)
summary(modins)
anova(modins, modins2nd)
step(min.model, scope = formula(modins2nd), direction = "forward")
step(modins2nd, direction = 'backward')
modins2nd <- lm(charges ~ age * smoker + I(age^2) + bmi * smoker + I(bmi^2) + region * smoker + age + bmi + smoker + region, data = insurance)
summary(modins2nd)
anova(modins, modins2nd)
step(min.model, scope = formula(modins2nd), direction = "forward")
step(modins2nd, direction = 'backward')
step(min.model, scope = formula(modins2nd), direction = "forward")
#complete second order model works better, lets see what terms are useful
min.model <- lm(charges ~ age, data = insurance)
step(min.model, scope = formula(modins2nd), direction = "forward")
modinsnew <- lm(charges ~ I(age^2) + bmi * smoker + I(bmi^2) + age + bmi + smoker + region, data = insurance)
summary(modinsnew)
summary(modins2nd)
anova(modins2nd, modinsnew)
summary(modinsnew)
qqnorm(modnosmoke$residuals, ylab="Standardized Residuals", xlab="Normal Scores")
qqline(modnosmoke$residuals)
qqnorm(modinsnew$residuals, ylab="Standardized Residuals", xlab="Normal Scores")
qqline(modinsnew$residuals)
#While still not great, this is the most straight line we've been able to come up with.
#I think the problem lies with people who have significant medical expenses
#(cancer, surgery, etc) which won't be captured by any of our variables
yhat3 <- predict(modinsnew)
plot(yhat3, modinsnew$residuals)
summary(modinsnew)
modinsmult <- lm(I(log(charges)) ~ I(age^2) + bmi * smoker + I(bmi^2) + age + bmi + smoker + region, data = insurance)
modinsln <- lm(I(exp(charges)) ~ I(age^2) + bmi * smoker + I(bmi^2) + age + bmi + smoker + region, data = insurance)
summary(modinsmult)
modinsln <- lm(I(charges^2) ~ I(age^2) + bmi * smoker + I(bmi^2) + age + bmi + smoker + region, data = insurance)
summary(modinsmult)
summary(modinsln)
plot(yhat3, modinsnew$residuals)
summary(modinsnew)
plot(insurance$bmi, modinsnew$residuals)
plot(insurance$age, modinsnew$residuals)
plot(insurance$children, modinsnew$residuals)
step(min.model, scope = formula(modins), direction = "forward")
step(modins, direction = 'backward')
modins2nd2 <- lm(charges ~ age * smoker + I(age^2) + bmi * smoker + I(bmi^2) + region * smoker + age + bmi + smoker + region + children + I(children^2) + children * region + children * smoker + children * bmi + children * age, data = insurance)
summary(modins2nd2)
min.model <- lm(charges ~ 1, data = insurance)
step(min.model, scope = formula(modins2nd), direction = "forward")
step(min.model, scope = formula(modins2nd2), direction = "forward")
min.model <- lm(charges ~ age, data = insurance)
step(min.model, scope = formula(modins2nd2), direction = "forward")
step(modins2nd2, direction = 'backward')
modinsnew2 <- lm(charges ~ I(age^2) + bmi * smoker + I(bmi^2) + age + bmi + smoker + region + children, data = insurance)
anova(modins2nd2, modinsnew2)
anova(modinsnew, modinsnew2)
anova(modinsnew2, modinsnew2nd2)
anova(modinsnew2, modins2nd2)
anova(modinsnew2, modinsnew)
summary(modinsnew2)
summary(modinsnew)
summary(modinsnew2)
qqnorm(modinsnew$residuals, ylab="Standardized Residuals", xlab="Normal Scores")
qqnorm(modinsnew2$residuals, ylab="Standardized Residuals", xlab="Normal Scores")
qqline(modinsnew$residuals)
library(car)
vif(modvif)
min.model <- lm(charges~1, data = insurance)
step(min.model, scope = formula(modins), direction = "forward")
step(modins, direction = 'backward')
modins <- lm(charges ~ age + bmi + children + smoker + region, data = insurance)
min.model <- lm(charges~1, data = insurance)
step(min.model, scope = formula(modins), direction = "forward")
step(modins, direction = 'backward')
modins <- lm(charges ~ age + bmi + children + smoker + region + sex, data = insurance)
min.model <- lm(charges~1, data = insurance)
step(min.model, scope = formula(modins), direction = "forward")
step(modins, direction = 'backward')
modins <- lm(charges ~ age + bmi + children + smoker + region, data = insurance)
yhat1 <- predict(modins)
qqnorm(modins$residuals, ylab="Standardized Residuals", xlab="Normal Scores")
qqline(modins$residuals)
plot(yhat1, modins$residuals)
plot(yhat1, modins$residuals, ylab = "Model Residuals", xlab = "predicted value of y")
modins2nd2 <- lm(charges ~ age * smoker + I(age^2) + bmi * smoker + I(bmi^2) + region * smoker + age + bmi + smoker + region + children + I(children^2) + children * region + children * smoker + children * bmi + children * age, data = insurance)
summary(modins2nd2)
modins2nd2sex <- lm(charges ~ age * smoker + I(age^2) + bmi * smoker + I(bmi^2) + region * smoker + age + bmi + smoker + region + children + I(children^2) + children * region + children * smoker + children * bmi + children * age + sex * age + sex * bmi + sex * region + sex * children + sex * smoker, data = insurance)
summary(modins2nd2sex)
anova(modins2nd2sex, modins2nd2)
View(modins2nd2sex)
anova(modins2nd2, modins2nd2sex)
anova(modinsnew2, modinsnew)
anova(modinsnew2, modins2nd2)
min.model <- lm(charges ~ age, data = insurance)
#complete second order model works better, lets see what terms are useful
min.model <- lm(charges ~ age, data = insurance)
step(min.model, scope = formula(modins2nd), direction = "forward")
modins2nd <- lm(charges ~ age * smoker + I(age^2) + bmi * smoker + I(bmi^2) + region * smoker + age + bmi + smoker + region + children, data = insurance)
min.model <- lm(charges ~ age, data = insurance)
modins2nd2 <- lm(charges ~ age * smoker + I(age^2) + bmi * smoker + I(bmi^2) + region * smoker + age + bmi + smoker + region + children + I(children^2) + children * region + children * smoker + children * bmi + children * age, data = insurance)
modins2nd3 <- lm(charges ~ age * smoker + I(age^2) + bmi * smoker + I(bmi^2) + region * smoker + age + bmi + smoker + region + children, data = insurance)
min.model <- lm(charges ~ age, data = insurance)
step(min.model, scope = formula(modins2nd3), direction = "forward")
step(modins2nd3, direction = 'backward')
summary(modinsnew2)
summary(modinsnew2)
qqnorm(modinsnew2$residuals, ylab="Standardized Residuals", xlab="Normal Scores")
qqline(modinsnew$residuals)
qqline(modinsnew2$residuals)
qqnorm(modinsnew2$residuals, ylab="Standardized Residuals", xlab="Normal Scores")
qqline(modinsnew2$residuals)
plot(insurance$children, modinsnew$residuals)
plot(yhat3, modinsnew$residuals)
plot(yhat3, modinsnew$residuals, xlab = "Predicted value of y", ylab = "Model Residuals")
summary(modins)
summary(modinsnew2)
vif(modvif)
summary(modinsnew2)
modsmo <- lm(charges ~ smoker, data = insurance)
summary(modsmo)
plot(insurance$charges, insurance$age)
plot(smokedata$charges, smokedata$age)
plot(nosmokedata$charges, nosmokedata$age)
plot(nosmokedata$charges, nosmokedata$age, xlab = "charges", ylab = "age", main = "Non-smokers")
plot(smokedata$charges, smokedata$age, xlab = "charges", ylab = "age", main = "Smokers")
plot(insurance$charges, insurance$age, xlab = "charges", ylab = "age", main = "Full Dataset")
plot(smokedata$charges, smokedata$bmi)
plot(smokedata$bmi, smokedata$charges)
plot(insurance$bmi, insurance$charges)
plot(smokerdata$bmi, smokerdata$charges)
plot(smokedata$bmi, smokedata$charges)
plot(nosmokedata$bmi, nosmokedata$charges)
install.packages("segmented")
library("segmented")
load("~/MATH 352/Exercises&Examples/GROWTH.Rdata")
View(GROWTH)
plot(GROWTH$HOURS, GROWTH$CELLS, xlab = "time (hrs.)", ylab = "number of cells")
modseg <- lm(CELLS ~ HOURS, data = GROWTH)
modseg1 <- segmented(modseg)
summary(modseg1)
summary(modseg)
summary(modseg1)
load("~/MATH 352/Exercises&Examples/GASKETS.Rdata")
View(GASKETS)
modgasket <- lm(DEFECTS ~ SPEED, data = GASKETS)
summary(modgasket)
plot(predict(modgasket), modgasket$residuals)
plot(GASKETS$SPEED, modgasket$residuals)
plot(GASKETS$SPEED, modgasket$residuals)
gask1 <- subset(GASKETS, SPEED == 100)
gask2 <- subset(GASKETS, SPEED == 150)
gask3 <- subset(GASKETS, SPEED == 200)
xbar1 <- mean(gask1$SPEED)
xbar2 <- mean(gask2$SPEED)
xbar3 <- mean(gask3$SPEED)
s1 <- sd(gask1$SPEED)
s2 <- sd(gask2$SPEED)
s3 <- sd(gask3$SPEED)
modgasket$residuals
s1 <- sd(modgasket$residuals[1:5])
s2 <- sd(gask2$SPEED[6:10])
s3 <- sd(gask3$SPEED[11:15])
s2 <- sd(modgasket$residuals[6:10])
s3 <- sd(modgasket$residuals[11:15])
s1^2
s2^2/150
s3^2/200
s1^2/sqrt(100)
s2^2/sqrt(150)
s3^2/sqrt(200)
s1^2/(100)^2
s2^2/(150)^2
s3^2/(200)^2
s1^2/100
s2^2/150
s3^2/200
wts <- c(rep(1/(100)^2, 5), rep(1/(150)^2, 5), rep(1/(200)^2, 5))
wts
s1^2/(100)^2
s2^2/(150)^2
s3^2/(200)^2
wts <- c(rep(1/(100)^2, 5), rep(1/(150)^2, 5), rep(1/(200)^2, 5))
wts
modgaskwt <- lm(DEFECTS ~ SPEED, weights = wts, data = GASKETS)
summary(modgaskwt)
summary(modgasket)
summary(modgaskwt)
plot(GASKETS$SPEED, weighted.residuals(modgaskwt))
load("~/MATH 352/Exercises&Examples/PACGEESE.Rdata")
View(PACGEESE)
modflight <- glm(RESPONSE ~ ., data = PACGEESE, family = binomial)
summary(modflight)
modflight <- glm(RESPONSE ~ . - FLIGHT, data = PACGEESE, family = binomial)
summary(modflight)
anova(modflight, test = "Chisq")
modflight2 <- glm(RESPONSE ~ . - FLIGHT - ALTITUDE, data = PACGEESE, family = binomial)
anova(modflight2, test = "Chisq")
predict.glm(modflight, newdata = (ALTITUDE = 6, LATERAL = 3))
predict.glm(modflight, newdata = data.frame(6,3))
predict.glm(modflight, newdata = data.frame(1,6,3))
predict.glm(modflight, newdata = data.frame(ALTITUDE = 6,LATERAL = 3))
predict.glm(modflight, newdata = data.frame(ALTITUDE = 6,LATERAL = 3, FLIGHT = 1))
predict.glm(modflight, newdata = data.frame(ALTITUDE = 6,LATERAL = 3, FLIGHT = 0))
pred <- predict.glm(modflight, newdata = data.frame(ALTITUDE = 6,LATERAL = 3, FLIGHT = 0))
exp(pred)/(1+exp(pred))
summary(modflight)
library(ggplot2)
library(rpart)
install.packages('rpart.plot')
library(rpart.plot)
head(For_R)
summary(For_R)
fit <- lm(GamesWon ~ SOS + HomeW + HomeL + AwayW + AwayL + TeamPoints + OpponentPoints + Pace + ORtg + FTr + ThreePAr + TS.per + TRB.per + AST.per + STL.per + BLK.per + eFG.per + TOV.per + ORB.per + FTperFGA, data=For_R)
summary(fit)
fit01 <- lm(Placing ~ SOS + HomeW + HomeL + TeamPoints + OpponentPoints + Pace + ORtg + AST.per + ORB.per, data=For_R)
summary(fit01)
predict(fit03, data.frame(SOS = 11.86, HomeW = 14.6068, TeamPoints = 2771.921, OpponentPoints = 2179.784, Pace = 73.8, FTr = 0.346, BLK.per = 16.7, eFG.per = .541, FTperFGA = .239))
predict(fit, data.frame(Win.per = .862, SimpleRatings = 30.03, SOS = 11.86, Conf.W = 15, Conf.L = 3, HomeW = 15, HomeL = 2, AwayW = 8, AwayL = 1, TeamPoints = 2900, OpponentPoints = 2060, Pace = 73.8, ORtg = 114.7, FTr = .346, ThreePAr = .378, TS.per = .567, TRB.per = 54.3, AST.per = 52.6, STL.per = 13.3, BLK.per = 16.7, eFG.per = .541, TOV.per = 14.7, ORB.per = 37, FTperFGA = .239))
predict(fit01, newdata=X2019_Prediction)
predict(fit, newdata=X2019_Prediction)
fitbasic <- lm(GamesWon ~ Win.per*SOS + PPG + OPPG, data=For_R)
summary(fitbasic)
fitadvanced <- lm(GamesWon ~ Pace + ORtg + FTr*FTperFGA + ThreePAr + TS.per*eFG.per + TRB.per*ORB.per + AST.per + STL.per + BLK.per + TOV.per, data=For_R)
summary(fitadvanced)
fittotal <- lm(GamesWon ~ Win.per*SOS + PPG*ORtg + OPPG + Pace + FTr*FTperFGA + ThreePAr + TS.per*eFG.per + TRB.per*ORB.per + AST.per + BLK.per + TOV.per + STL.per, data=For_R)
summary(fittotal)
predict(fittotal, newdata = X2019_Tournament,interval = 'confidence')
fittest <- lm(GamesWon ~ SimpleRatings, data = For_R)
summary(fittest)
p1 <- predict(fitadvanced, newdata=X2019_Mar9_xls, interval = "confidence")
p2 <- predict(fitbasic, newdata=X2019_Mar9_xls, interval = "confidence")
final <- (p1 + p2)
summary(final)
print(final)
dim(For_R)
rows <- seq(1, 150)
set.seed(6)
train.rows <- sample(rows, size=100)
train <- For_R[train.rows,]
test <- For_R[-train.rows,]
modadvanced <- rpart(GamesWon ~  Pace + ORtg + FTr + ThreePAr + TS.per + TRB.per + AST.per + STL.per + BLK.per + eFG.per + TOV.per + ORB.per, data = train, method = 'class')
rpart.plot(modadvanced, extra=4)
#11136
modbasic <- rpart(GamesWon ~ SOS + Win.per + WinSOS + PPG + OPPG, data=train, method = 'class')
rpart.plot(modbasic, extra=4)
#12345
modtotal <- rpart(GamesWon ~  WinSOS + SOS + HomeW + HomeL + AwayW + AwayL + PPG + OPPG + Pace + ORtg + FTr + ThreePAr + TS.per + TRB.per + AST.per + STL.per + BLK.per + eFG.per + TOV.per + ORB.per, data=train, method = "class")
rpart.plot(modtotal, extra=4)
#11111
predict(modadvanced, newdata = X2019_Tournament)
#Grey Not past sweet 16
predict(modbasic, newdata = X2019_Tournament)
#Green in final 4
predict(modtotal, newdata = X2019_Tournament)
#Red not past 32, green in elite 8
#picking method: 1. Use ML trees to find bust/cinderella/final 4 probabilities 2. Use fittotal for H2H
# for game odds: pnorm(team1score, team2score,(team1upr-team1score)/2)
pnorm(3.4187841,3.7600179,(4.09938372-3.4187841)/2)
final <- (predict(modadvanced, newdata = X2019_Tournament) + predict(modbasic, newdata = X2019_Tournament) + predict(modtotal, newdata = X2019_Tournament))/3
print(final)
final <- (predict(modadvanced, newdata = X2019_Tournament) + predict(modbasic, newdata = X2019_Tournament) + predict(modtotal, newdata = X2019_Tournament))/3
View(final)
View(For_R)
rpart.plot(modtotal, extra=4)
modtotal <- rpart(GamesWon ~  WinSOS + SOS + HomeW + HomeL + AwayW + AwayL + PPG + OPPG + Pace + ORtg + FTr + ThreePAr + TS.per + TRB.per + AST.per + STL.per + BLK.per + eFG.per + TOV.per + ORB.per, data=train, method = "anova")
rpart.plot(modtotal, extra=4)
modtotal <- rpart(GamesWon ~  WinSOS + SOS + HomeW + HomeL + AwayW + AwayL + PPG + OPPG + Pace + ORtg + FTr + ThreePAr + TS.per + TRB.per + AST.per + STL.per + BLK.per + eFG.per + TOV.per + ORB.per, data=train, method = "anova")
rpart.plot(modtotal)
modtotal <- rpart(GamesWon ~  WinSOS + SOS + HomeW + HomeL + AwayW + AwayL + PPG + OPPG + Pace + ORtg + FTr + ThreePAr + TS.per + TRB.per + AST.per + STL.per + BLK.per + eFG.per + TOV.per + ORB.per, data=train, method = "class")
rpart.plot(modtotal, extra=4)
print(final)
View(final)
write.csv(final,"C:\Users\jbarr\Documents\Projects\NCAA Basketball\finaldata2019", row.names = FALSE)
write.csv(final,"C:/Users/jbarr/Documents/Projects/NCAA Basketball/finaldata2019", row.names = FALSE)
View(X2019_Tournament)
summary(modins)
anova(modins)
View(BballrefData)
View(BballrefDatav2)
library(readxl)
url <- "file:///C:/Users/jbarr/Downloads/2006 Draft.xlsx"
destfile <- "X2006_Draft.xlsx"
curl::curl_download(url, destfile)
X2006_Draft <- read_excel(destfile)
View(X2006_Draft)
moddraft <- lm(Difference ~ Ath + Size + Def + Str + Quick + Leader + Shot + Ready + Pot + Int, data = X2006_Draft)
summary(moddraft)
step(moddraft, direction = "backward")
modsmall <- lm(Difference ~ Ath + Size + Pot + Int, data = X2006_Draft)
summary(modsmall)
View(X2019_Prediction)
View(X2019_Tournament)
anova(fittotal, fitadvanced)
summary(fitadvanced)
fittotal <- lm(GamesWon ~ Win.per*SOS + PPG*ORtg + OPPG + Pace + FTr*FTperFGA + ThreePAr + TS.per*eFG.per + TRB.per*ORB.per + AST.per + BLK.per + TOV.per + STL.per, data=For_R)
summary(fittotal)
anova(fittotal, fitbasic)
summary(fitbasic)
step(min.model, scope = formula(fittotal), direction = "forward")
min.model = lm(GamesWon ~ 1, data = For_R)
step(min.model, scope = formula(fittotal), direction = "forward")
step(fittotal, direction = "backward")
step(min.model, scope = formula(fittotal), direction = "forward")
step(fittotal, direction = "backward")
step(min.model, scope = formula(fittotal), direction = "forward")
fit2 <- lm(GamesWon ~ Win.per*SOS + OPPG + AST.per + FTperFGA + TS.per + eFG.per, data = For_R)
fitsmol <- lm(GamesWon ~ Win.per*SOS + OPPG + AST.per, data = For_R)
anova(fit2, fitsmol)
summary(fit2)
train <- For_R[train.rows,]
test <- For_R[-train.rows,]
mod2 <- rpart(GamesWon ~ Win.per*SOS + OPPG + AST.per + FTperFGA + TS.per + eFG.per, data = train, method = 'class')
install.packages('rpart.plot')
library(rpart.plot)
rpart.plot(mod2, extra=4)
rpart.plot(modtotal, extra=4)
mod2 <- rpart(GamesWon ~ Win.per*SOS + OPPG + AST.per + FTperFGA + TS.per + eFG.per, data = train, method = 'class')
mod2 <- rpart(GamesWon ~ Win.per + SOS + WinSOS + OPPG + AST.per + FTperFGA + TS.per + eFG.per, data = train, method = 'class')
rpart.plot(mod2, extra=4)
predict(mod2, newdata = X2019_Tournament)
View(For_R)
mod2 <- rpart(ForTree ~ Win.per + SOS + WinSOS + OPPG + AST.per + FTperFGA + TS.per + eFG.per, data = train, method = 'class')
rpart.plot(mod2, extra=4)
mod2 <- rpart(ForTree ~ Win.per + SOS + WinSOS + OPPG + AST.per + FTperFGA + TS.per + eFG.per, data = train, method = 'class')
rpart.plot(mod2, extra=4)
final <- (predict(mod2, newdata = X2019_Tournament) + predict(mod2, newdata = X2019_Tournament) + predict(modbasic, newdata = X2019_Tournament) + predict(modtotal, newdata = X2019_Tournament))/4
print(final)
mod2 <- rpart(GamesWon ~ Win.per + SOS + WinSOS + OPPG + AST.per + FTperFGA + TS.per + eFG.per, data = train, method = 'class')
rpart.plot(mod2, extra=4)
final <- (predict(mod2, newdata = X2019_Tournament) + predict(mod2, newdata = X2019_Tournament) + predict(modbasic, newdata = X2019_Tournament) + predict(modtotal, newdata = X2019_Tournament))/4
print(final)
set.seed(13)
mod2 <- rpart(GamesWon ~ Win.per + SOS + WinSOS + OPPG + AST.per + FTperFGA + TS.per + eFG.per, data = train, method = 'class')
rpart.plot(mod2, extra=4)
set.seed(21)
mod2 <- rpart(GamesWon ~ Win.per + SOS + WinSOS + OPPG + AST.per + FTperFGA + TS.per + eFG.per, data = train, method = 'class')
rpart.plot(mod2, extra=4)
train.rows <- sample(rows, size=100)
train <- For_R[train.rows,]
test <- For_R[-train.rows,]
mod2 <- rpart(GamesWon ~ Win.per + SOS + WinSOS + OPPG + AST.per + FTperFGA + TS.per + eFG.per, data = train, method = 'class')
rpart.plot(mod2, extra=4)
final <- (predict(mod2, newdata = X2019_Tournament) + predict(mod2, newdata = X2019_Tournament) + predict(modbasic, newdata = X2019_Tournament) + predict(modtotal, newdata = X2019_Tournament))/4
print(final)
write.csv(final,"C:/Users/jbarr/Documents/Projects/NCAA Basketball/finaldata2019v2", row.names = FALSE)
set <- c(510, 490, 420, 200, 300, 400, 340, 300, 545, 625, 700, 642, 640, 650)
summary(set)
636.2-355
355-((636.2-355)*1.5)
636.2+((636.2-355)*1.5)
box(set)
plot(set)
box(set)
boxplot(set)
set <- c(510, 490, 420, 200, 300, 400, 340, 300, 545, 625, 700, 642, 640, 650,2000)
boxplot(set)
plot(nosmokedata$bmi, nosmokedata$charges)
plot(insurance$charges, insurance$age, xlab = "charges", ylab = "age", main = "Full Dataset")
modsmo <- lm(charges ~ smoker, data = insurance)
summary(modsmo)
modins2nd3 <- lm(charges ~ age * smoker + I(age^2) + bmi * smoker + I(bmi^2) + region * smoker + age + bmi + smoker + region + children, data = insurance)
min.model <- lm(charges ~ age, data = insurance)
step(min.model, scope = formula(modins2nd3), direction = "forward")
step(modins2nd3, direction = 'backward')
summary(modinsnew2)
modsmo <- lm(charges ~ smoker, data = insurance)
summary(modsmo)
installed.packages()
sessionInfo()
library("curl")
print("Hello, World!")
savehistory("~/DATA 330/example_joebarry1.Rhistory")
