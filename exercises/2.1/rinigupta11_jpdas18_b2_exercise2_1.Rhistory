if (lat > 90 || lat < -90) {
stop("Warning: Latitude outside range of validity (-90 to 90)!")
}
if (n < 1 || n > 366) {
stop("Warning: Day outside range of validity (1 to 366)!")
}
# ~~~~~~~~~~~~~~~~~~~~~~~ FUNCTION VARIABLES ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
solar <- list()
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 01. Calculate the number of days in yeark (kN), days
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
if (y == 0) {
kN <- 365
} else {
kN <- (julian_day(y + 1, 1, 1) - julian_day(y, 1, 1))
}
solar$kN <- kN
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 02. Calculate heliocentric longitudes (nu and lambda), degrees
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
my_helio <- berger_tls(n, kN)
nu <- my_helio[1]
lam <- my_helio[2]
solar$nu_deg <- nu
solar$lambda_deg <- lam
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 03. Calculate distance factor (dr), unitless
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Berger et al. (1993)
kee <- ke^2
rho <- (1 - kee)/(1 + ke*dcos(nu))
dr <- (1/rho)^2
solar$rho <- rho
solar$dr <- dr
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 04. Calculate the declination angle (delta), degrees
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Woolf (1968)
delta <- asin(dsin(lam)*dsin(keps))
delta <- delta/pir
solar$delta_deg <- delta
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 05. Calculate variable substitutes (u and v), unitless
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ru <- dsin(delta)*dsin(lat)
rv <- dcos(delta)*dcos(lat)
solar$ru <- ru
solar$rv <- rv
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 06. Calculate the sunset hour angle (hs), degrees
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Note: u/v equals tan(delta) * tan(lat)
if (ru/rv >= 1.0) {
hs <- 180  # Polar day (no sunset)
} else if (ru/rv <= -1.0) {
hs <- 0 # Polar night (no sunrise)
} else {
hs <- acos(-1.0*ru/rv)
hs <- hs / pir
}
solar$hs_deg <- hs
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 07. Calculate daily extraterrestrial radiation (ra_d), J/m^2
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ref: Eq. 1.10.3, Duffy & Beckman (1993)
ra_d <- (86400/pi)*kGsc*dr*(ru*pir*hs + rv*dsin(hs))
solar$ra_j.m2 <- ra_d
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 08. Calculate transmittivity (tau), unitless
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ref:  Eq. 11, Linacre (1968); Eq. 2, Allen (1996)
tau_o <- (kc + kd*sf)
tau <- tau_o*(1 + (2.67e-5)*elv)
solar$tau_o <- tau_o
solar$tau <- tau
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 09. Calculate daily photosynthetic photon flux density (ppfd_d), mol/m^2
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ppfd_d <- (1e-6)*kfFEC*(1 - kalb_vis)*tau*ra_d
solar$ppfd_mol.m2 <- ppfd_d
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 10. Estimate net longwave radiation (rnl), W/m^2
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rnl <- (kb + (1 - kb)*sf)*(kA - tc)
solar$rnl_w.m2 <- rnl
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 11. Calculate variable substitue (rw), W/m^2
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rw <- (1 - kalb_sw)*tau*kGsc*dr
solar$rw <- rw
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 12. Calculate net radiation cross-over angle (hn), degrees
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
if ((rnl - rw*ru)/(rw*rv) >= 1.0) {
hn <- 0  # Net radiation is negative all day
} else if ((rnl - rw*ru)/(rw*rv) <= -1.0) {
hn <- 180 # Net radiation is positive all day
} else {
hn <- acos((rnl - rw*ru)/(rw*rv))
hn <- hn/pir
}
solar$hn_deg <- hn
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 13. Calculate daytime net radiation (rn_d), J/m^2
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rn_d <- (86400/pi)*(hn*pir*(rw*ru - rnl) + rw*rv*dsin(hn))
solar$rn_j.m2 <- rn_d
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 14. Calculate nighttime net radiation (rnn_d), J/m^2
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# fixed iss#13
rnn_d <- (86400/pi)*(
rw*rv*(dsin(hs) - dsin(hn)) +
rw*ru*(hs - hn)*pir -
rnl*(pi - hn*pir)
)
solar$rnn_j.m2 <- rnn_d
# ~~~~~~~~~~~~~~~~~~~~~~~~~~ RETURN VALUES ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
return(solar)
}
# ************************************************************************
# Name:     julian_day
# Inputs:   - double, year (y)
#           - double, month (m)
#           - double, day of month (i)
# Returns:  double, Julian day
# Features: This function converts a date in the Gregorian calendar
#           to a Julian day number (i.e., a method of consecutative
#           numbering of days---does not have anything to do with
#           the Julian calendar!)
#           * valid for dates after -4712 January 1 (i.e., jde >= 0)
# Ref:      Eq. 7.1 J. Meeus (1991), Chapter 7 "Julian Day", Astronomical
#             Algorithms
# ************************************************************************
julian_day <- function(y, m, i) {
if (m <= 2) {
y <- y - 1
m <- m + 12
}
a <- floor(y/100)
b <- 2 - a + floor(a/4)
jde <- floor(365.25*(y + 4716)) + floor(30.6001*(m + 1)) + i + b - 1524.5
return(jde)
}
# ---------------------------------------------------------------------------
#                            END SPLASH CODE
# ---------------------------------------------------------------------------
# ************************************************************************
# Name:     spencer_eot
# Input:    - int, day of the year (n)
#           - int, days in current year (N)
# Output:   float, equation of time, hours
# Features: Returns the equation of time
# Depends:  - dcos
#           - dsin
# Ref:      Spencer, J.W. (1971), Fourier series representation of the
#           position of the sun, Search, 2 (5), p. 172.
# ************************************************************************
spencer_eot <- function(n, N) {
B <- 2.0*pi*(n - 1.0)/N
my_eot <- (7.5e-6)
my_eot <- my_eot + (1.868e-3)*dcos(B)
my_eot <- my_eot - (3.2077e-2)*dsin(B)
my_eot <- my_eot - (1.4615e-2)*dcos(2.0*B)
my_eot <- my_eot - (4.0849e-2)*dsin(2.0*B)
my_eot <- my_eot * (12.0/pi)
return(my_eot)
}
# ************************************************************************
# Name:     calc_daily_fluxes
# Inputs:   - float, latitude, degrees N (lat)
#           - float, longitude, degrees E (lon)
#           - int, day of year (n)
#           - float, elevation above mean sea level, m (elv)
#           - int, current year (y)
# Returns:  list object (solar)
# Features: Calculates the half-hourly extraterrestrial solar radiation
#           flux based on the GePiSaT model.
# Depends:  - calc_daily_solar
#           - dcos
#           - spencer_eot
# Ref:      solar.py from the gepisat module of py_version
#           https://bitbucket.org/labprentice/gepisat/src/master/
# ************************************************************************
calc_daily_fluxes <- function(lat, lon, n, elv, y){
# ~~~~~~~~~~~~~~~~~~~~~~~ FUNCTION VARIABLES ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
solar <- list()
# Take advantage of our existing function
daily.solar <- calc_daily_solar(lat, n, elv, y)
dr <- daily.solar$dr
ru <- daily.solar$ru
rv <- daily.solar$rv
kN <- daily.solar$kN
# What do we need?
# x io_hh (<-- the half-hourly Io values we want!)
#   x w_hh
#     x ts_hh
#       x local_hh
#       x eot (create spencer_eot function)
#       x lonc
#         x lon (added to input)
#         x tz_hour
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create local time series, hours
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
local_hh <- seq(from = 0, to = 23.5, by = 0.5)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Calculate time zone hour, hours
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
if (lon < 0) {
# Swap sign to "round down" negative numbers:
temp_lon <- -1.0*lon
temp_tzh <- floor(temp_lon/15)  # floor makes integers
tz_hour <- -1.0*temp_tzh        # out of floats
} else {
tz_hour <- floor(lon/15)
}
solar$tz_hour <- tz_hour
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Calculate the equation of time, hours
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Spencer (1971)
eot <- spencer_eot(n, kN)
solar$eot_hour <- eot
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Calculate the longitude correction, hours
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
lonc <- (15.0*tz_hour - lon)/15.0
solar$lc_hour <- lonc
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Calculate the solar time, hours
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ts_hh <- local_hh + eot - lonc
solar$ts_hh <- ts_hh
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Calculate the hour angle, degrees
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
w_hh <- (360./24.)*(ts_hh - 12.0)
solar$w_hh <- w_hh
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Calculate the half-hourly solar radiation flux, W/m^2
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
io_hh <- kGsc*dr*(ru + rv*dcos(w_hh))
io_hh[io_hh < 0] <- 0  # UPDATED FROM numpy.clip
solar$io_wm2 <- io_hh
return(solar)
}
# Testing
my.lat <- 34.2547
my.lon <- -89.8735
my.elv <- 87
my.n <- 335
my.y <- 2003
my.solar <- calc_daily_fluxes(my.lat, my.lon, my.n, my.elv, my.y)
# Read data into a data frame
flux12.url <- "https://ds-wm.github.io/course/atsa/data/FLX_US-Goo_FLUXNET2015_SUBSET_HH_2003-12_1-4.csv"
flux12.df <- read.csv(flux12.url)
# Extract the variable of interest and fix NA values (-9999)
# see "missing data" here: https://fluxnet.org/data/aboutdata/data-variables/
flux12.ppfd <- flux12.df$PPFD_IN
flux12.ppfd[which(flux12.ppfd == -9999)] <- NA
# Plot the data w/ gaps
options(repr.plot.width=14, repr.plot.height=6, repr.plot.res = 125)
plot(
flux12.ppfd,
type = 'l',
xlab = "Half-hourly samples",
ylab = bquote("PPFD " ~ mu ~ "mol" ~ m^{-2} ~ s^{-1}),
main = "Missing Photosynthetic Radiation - AmeriFlux US-Goo (2003-12)"
)
# Data citation: Weedon et al., (2018)
watch.url <- "https://ds-wm.github.io/course/atsa/data/watch_swdown_us-goo.csv"
watch.df <- read.csv(watch.url)
a <- list() # Gap filled values
a <- as.numeric(a)
my.n <- 335
for (i in 1:31){
SW_down <- watch.df[i, "SWdown_2003.12"]*86400 #multiply by number of seconds in a day
I_o <- calc_daily_fluxes(my.lat, my.lon, my.n, my.elv, my.y)$io_wm2
H_o <- calc_daily_solar(my.lat, my.n, my.elv, my.y)$ra_j.m2
my.n <- my.n + 1
fill <- (kfFEC * (SW_down/H_o) * I_o)
a <- c(a, fill)
}
b <- list() # Complete values
b <- as.numeric(b)
d <- list() # Gap filled values with original data blank for plotting
d <- as.numeric(d)
for (i in 1:length(flux12.ppfd)){
if (is.na(flux12.ppfd[i])){
b <- c(b, a[i])
d <- c(d, a[i])
}
else {
b <- c(b, flux12.ppfd[i])
d <- c(d, NA)
}
}
# Plot the data w/ gaps
options(repr.plot.width=14, repr.plot.height=6, repr.plot.res = 125)
plot(
flux12.ppfd,
type = 'l',
lwd = 1,
xlab = "Half-hourly samples",
ylab = bquote("PPFD " ~ mu ~ "mol" ~ m^{-2} ~ s^{-1}),
col = "blue",
main = "Photosynthetic Radiation with Gap Filled Values - AmeriFlux US-Goo (2003-12)",
ylim = c(0, 1150)
)
legend("top", legend=c("Gap Fill Values", "Flux Values without Gap Filling"),
col=c("red", "blue"), lty=2:1, cex = .7, horiz=TRUE, box.lty=0)
lines(d, col = 'red', lty = 2)
savehistory("~/Desktop/rinigupta11_jpdas18_b2_exercise2_1.Rhistory")
savehistory("~/Desktop/rinigupta11_jpdas18_b2_exercise2_2.Rhistory")
mins.15.ts.adc1 <- ts(fifteen.minutes$adc1, start = c(2010, 2011, 2012))
mins.15.ts.adc1.nodup <- ts(fifteen.minutes.nodup$adc1, start = c(2010, 2011, 2012))
adc1.15.mins.r <- cor(x=mins.15.ts.adc1, y=mins.15.ts.adc1.nodup, use="complete.obs")
adc1.15.mins.rsquared <- adc1.15.mins.r^2
rmse.adc1.15.mins <- rmse(mins.15.ts.adc1, mins.15.ts.adc1.nodup, na.rm=T)
plot(mins.15.ts.adc1, mins.15.ts.adc1.nodup, xlab = 'ADC1 with Duplicates', ylab = "ADC1 without Duplicates",
main = "Duplicates Versus No Duplicates For \n Fifteen Minute Time Aggregation of ADC1")
adc1.15.mins.r
# Computing R, R^2, RMSE, and Plotting for ADC1
mins.15.ts.adc1 <- ts(fifteen.minutes$adc1, start = c(2010))
mins.15.ts.adc1.nodup <- ts(fifteen.minutes.nodup$adc1, start = c(2010, 2011, 2012))
adc1.15.mins.r <- cor(x=mins.15.ts.adc1, y=mins.15.ts.adc1.nodup, use="complete.obs")
adc1.15.mins.rsquared <- adc1.15.mins.r^2
rmse.adc1.15.mins <- rmse(mins.15.ts.adc1, mins.15.ts.adc1.nodup, na.rm=T)
plot(mins.15.ts.adc1, mins.15.ts.adc1.nodup, xlab = 'ADC1 with Duplicates', ylab = "ADC1 without Duplicates",
main = "Duplicates Versus No Duplicates For \n Fifteen Minute Time Aggregation of ADC1")
length(day.adc0)
length(day.dup.adc0)
# Computing R, R^2, RMSE, and Plotting for ADC1
mins.15.ts.adc1 <- ts(fifteen.minutes$adc1, start = 2010, end = 2012)
mins.15.ts.adc1.nodup <- ts(fifteen.minutes.nodup$adc1, start = 2010, end = 2012)
adc1.15.mins.r <- cor(x=mins.15.ts.adc1, y=mins.15.ts.adc1.nodup, use="complete.obs")
adc1.15.mins.rsquared <- adc1.15.mins.r^2
# Computing R, R^2, RMSE, and Plotting for ADC1
mins.15.ts.adc1 <- ts(fifteen.minutes$adc1, start = 2010, end = 2012)
mins.15.ts.adc1.nodup <- ts(fifteen.minutes.nodup$adc1, start = 2010, end = 2012)
adc1.15.mins.r <- cor(x=mins.15.ts.adc1, y=mins.15.ts.adc1.nodup, use="complete.obs")
# Computing R, R^2, RMSE, and Plotting for ADC1
mins.15.ts.adc1 <- ts(fifteen.minutes$adc1, start = c(2010,1), end = c(2012, 1))
mins.15.ts.adc1.nodup <- ts(fifteen.minutes.nodup$adc1, start = c(2010,1), end = c(2012,1))
adc1.15.mins.r <- cor(x=mins.15.ts.adc1, y=mins.15.ts.adc1.nodup, use="complete.obs")
# Computing R, R^2, RMSE, and Plotting for ADC1
mins.15.ts.adc1 <- ts(fifteen.minutes$adc1, start = c(2010))
mins.15.ts.adc1.nodup <- ts(fifteen.minutes.nodup$adc1, start = c(2010))
adc1.15.mins.r <- cor(x=mins.15.ts.adc1, y=mins.15.ts.adc1.nodup, use="complete.obs")
# Computing R, R^2, RMSE, and Plotting for ADC1
mins.15.ts.adc1 <- ts(fifteen.minutes$adc1, start = 2010, frequency = 15*4*24*365)
mins.15.ts.adc1.nodup <- ts(fifteen.minutes.nodup$adc1, start = 2010, frequency = 15*4*24*365)
adc1.15.mins.r <- cor(x=mins.15.ts.adc1, y=mins.15.ts.adc1.nodup, use="complete.obs")
adc1.15.mins.rsquared <- adc1.15.mins.r^2
rmse.adc1.15.mins <- rmse(mins.15.ts.adc1, mins.15.ts.adc1.nodup, na.rm=T)
plot(mins.15.ts.adc1, mins.15.ts.adc1.nodup, xlab = 'ADC1 with Duplicates', ylab = "ADC1 without Duplicates",
main = "Duplicates Versus No Duplicates For \n Fifteen Minute Time Aggregation of ADC1")
# Computing R, R^2, RMSE, and Plotting for ADC1
mins.15.ts.adc1 <- ts(fifteen.minutes$adc1, start = 2010, end = 2012, frequency = 15*4*24*365)
mins.15.ts.adc1.nodup <- ts(fifteen.minutes.nodup$adc1, start = 2010, end = 2012, frequency = 15*4*24*365)
adc1.15.mins.r <- cor(x=mins.15.ts.adc1, y=mins.15.ts.adc1.nodup, use="complete.obs")
adc1.15.mins.rsquared <- adc1.15.mins.r^2
rmse.adc1.15.mins <- rmse(mins.15.ts.adc1, mins.15.ts.adc1.nodup, na.rm=T)
plot(mins.15.ts.adc1, mins.15.ts.adc1.nodup, xlab = 'ADC1 with Duplicates', ylab = "ADC1 without Duplicates",
main = "Duplicates Versus No Duplicates For \n Fifteen Minute Time Aggregation of ADC1")
adc1.15.mins.r
mins.15.ts.adc0 <- ts(fifteen.minutes$adc0,  start = 2010, end = 2012, frequency = 35040)
mins.15.ts.adc0.nodup <- ts(fifteen.minutes.nodup$adc0, start = 2010, end = 2012, frequency = 35040)
adc0.15.mins.r <- cor(x=mins.15.ts.adc0, y=mins.15.ts.adc0.nodup, use="complete.obs")
adc0.15.mins.rsquared <- adc0.15.mins.r^2
rmse.adc0.15.mins <- rmse(mins.15.ts.adc0, mins.15.ts.adc0.nodup, na.rm=T)
plot(mins.15.ts.adc0, mins.15.ts.adc0.nodup, xlab = 'ADC0 with Duplicates', ylab = "ADC0 without Duplicates",
main = "Duplicates Versus No Duplicates For \n Fifteen Minute Time Aggregation of ADC0")
hour.ts.adc0 <- ts(sixty.minutes$adc0, start = 2010, end = 2012, frequency = 8760)
hour.ts.adc0.nodup <- ts(sixty.minutes.nodup$adc0, start = 2010, end = 2012, frequency = 8760)
adc0.hour.r <- cor(x=hour.ts.adc0, y=hour.ts.adc0.nodup, use="complete.obs")
adc0.hour.rsquared <- adc0.hour.r^2
rmse.adc0.hour <- rmse(hour.ts.adc0, hour.ts.adc0.nodup, na.rm=T)
plot(hour.ts.adc0, hour.ts.adc0.nodup, xlab = 'ADC0 with Duplicates', ylab = "ADC0 without Duplicates",
main = "Duplicates Versus No Duplicates For \n Sixty Minute Time Aggregation of ADC0")
hours.12.ts.adc0 <- ts(twelve.hour$adc0, start = 2010, end = 2012, frequency = 730)
hours.12.ts.adc0.nodup <- ts(twelve.hour.nodup$adc0, start = 2010, end = 2012, frequency = 730)
adc0.hours.12.r <- cor(x=hours.12.ts.adc0, y=hours.12.ts.adc0.nodup, use="complete.obs")
adc0.hours.12.rsquared <- adc0.hours.12.r^2
rmse.adc0.hours.12 <- rmse(hours.12.ts.adc0, hours.12.ts.adc0.nodup, na.rm=T)
plot(hours.12.ts.adc0, hours.12.ts.adc0.nodup, xlab = 'ADC0 with Duplicates', ylab = "ADC0 without Duplicates",
main = "Duplicates Versus No Duplicates For \n Twelve Hour Time Aggregation of ADC0")
day.ts.adc0 <- ts(day$adc0, start = 2010, end = 2012, frequency = 365)
day.ts.adc0.nodup <- ts(day.nodup$adc0, start = 2010, end = 2012, frequency = 365)
adc0.day.r <- cor(x=day.ts.adc0, y=day.ts.adc0.nodup, use="complete.obs")
adc0.day.rsquared <- adc0.day.r^2
rmse.adc0.day <- rmse(day.ts.adc0, day.ts.adc0.nodup, na.rm=T)
plot(day.ts.adc0, day.ts.adc0.nodup, xlab = 'ADC0 with Duplicates', ylab = "ADC0 without Duplicates",
main = "Duplicates Versus No Duplicates For \n Daily Time Aggregation of ADC0")
# Computing R, R^2, RMSE, and Plotting for ADC1
mins.15.ts.adc1 <- ts(fifteen.minutes$adc1, start = 2010, end = 2012, frequency = 35040)
mins.15.ts.adc1.nodup <- ts(fifteen.minutes.nodup$adc1, start = 2010, end = 2012, frequency = 35040)
adc1.15.mins.r <- cor(x=mins.15.ts.adc1, y=mins.15.ts.adc1.nodup, use="complete.obs")
adc1.15.mins.rsquared <- adc1.15.mins.r^2
rmse.adc1.15.mins <- rmse(mins.15.ts.adc1, mins.15.ts.adc1.nodup, na.rm=T)
plot(mins.15.ts.adc1, mins.15.ts.adc1.nodup, xlab = 'ADC1 with Duplicates', ylab = "ADC1 without Duplicates",
main = "Duplicates Versus No Duplicates For \n Fifteen Minute Time Aggregation of ADC1")
hour.ts.adc1 <- ts(sixty.minutes$adc1, start = 2010, end = 2012, frequency = 8760)
hour.ts.adc1.nodup <- ts(sixty.minutes.nodup$adc1, start = 2010, end = 2012, frequency = 8760)
adc1.hour.r <- cor(x=hour.ts.adc1, y=hour.ts.adc1.nodup, use="complete.obs")
adc1.hour.rsquared <- adc1.hour.r^2
rmse.adc1.hour <- rmse(hour.ts.adc1, hour.ts.adc1.nodup, na.rm=T)
plot(hour.ts.adc1, hour.ts.adc1.nodup, xlab = 'ADC1 with Duplicates', ylab = "ADC1 without Duplicates",
main = "Duplicates Versus No Duplicates For \n Sixty Minute Time Aggregation of ADC1")
hours.12.ts.adc1 <- ts(twelve.hour$adc1, start = 2010, end = 2012, frequency = 730)
hours.12.ts.adc1.nodup <- ts(twelve.hour.nodup$adc1, start = 2010, end = 2012, frequency = 730)
adc1.hours.12.r <- cor(x=hours.12.ts.adc1, y=hours.12.ts.adc1.nodup, use="complete.obs")
adc1.hours.12.rsquared <- adc1.hours.12.r^2
rmse.adc1.hours.12 <- rmse(hours.12.ts.adc1, hours.12.ts.adc1.nodup, na.rm=T)
plot(hours.12.ts.adc1, hours.12.ts.adc1.nodup, xlab = 'ADC1 with Duplicates', ylab = "ADC1 without Duplicates",
main = "Duplicates Versus No Duplicates For \n Twelve Hour Time Aggregation of ADC1")
day.ts.adc1 <- ts(day$adc1, start = 2010, end = 2012, frequency = 365)
day.ts.adc1.nodup <- ts(day.nodup$adc1, start = 2010, end = 2012, frequency = 365)
adc1.day.r <- cor(x=day.ts.adc1, y=day.ts.adc1.nodup, use="complete.obs")
adc1.day.rsquared <- adc1.day.r^2
rmse.adc1.day <- rmse(day.ts.adc1, day.ts.adc1.nodup, na.rm=T)
plot(day.ts.adc1, day.ts.adc1.nodup, xlab = 'ADC1 with Duplicates', ylab = "ADC1 without Duplicates",
main = "Duplicates Versus No Duplicates For \n Daily Time Aggregation of ADC1")
# Computing R, R^2, RMSE, and Plotting for ADC2
mins.15.ts.adc2 <- ts(fifteen.minutes$adc2,  start = 2010, end = 2012, frequency = 35040)
mins.15.ts.adc2.nodup <- ts(fifteen.minutes.nodup$adc2,  start = 2010, end = 2012, frequency = 35040)
adc2.15.mins.r <- cor(x=mins.15.ts.adc2, y=mins.15.ts.adc2.nodup, use="complete.obs")
adc2.15.mins.rsquared <- adc2.15.mins.r^2
rmse.adc2.15.mins <- rmse(mins.15.ts.adc2, mins.15.ts.adc2.nodup, na.rm=T)
plot(mins.15.ts.adc2, mins.15.ts.adc2.nodup, xlab = 'ADC2 with Duplicates', ylab = "ADC2 without Duplicates",
main = "Duplicates Versus No Duplicates For \n Fifteen Minute Time Aggregation of ADC2")
hour.ts.adc2 <- ts(sixty.minutes$adc2, start = 2010, end = 2012, frequency = 8760)
hour.ts.adc2.nodup <- ts(sixty.minutes.nodup$adc2, start = 2010, end = 2012, frequency = 8760)
adc2.hour.r <- cor(x=hour.ts.adc2, y=hour.ts.adc2.nodup, use="complete.obs")
adc2.hour.rsquared <- adc2.hour.r^2
rmse.adc2.hour <- rmse(hour.ts.adc2, hour.ts.adc2.nodup, na.rm=T)
plot(hour.ts.adc2, hour.ts.adc2.nodup, xlab = 'ADC2 with Duplicates', ylab = "ADC2 without Duplicates",
main = "Duplicates Versus No Duplicates For \n Sixty Minute Time Aggregation of ADC2")
hours.12.ts.adc2 <- ts(twelve.hour$adc2, start = 2010, end = 2012, frequency = 730)
hours.12.ts.adc2.nodup <- ts(twelve.hour.nodup$adc2, start = 2010, end = 2012, frequency = 730)
adc2.hours.12.r <- cor(x=hours.12.ts.adc2, y=hours.12.ts.adc2.nodup, use="complete.obs")
adc2.hours.12.rsquared <- adc2.hours.12.r^2
rmse.adc2.hours.12 <- rmse(hours.12.ts.adc2, hours.12.ts.adc2.nodup, na.rm=T)
plot(hours.12.ts.adc2, hours.12.ts.adc2.nodup, xlab = 'ADC2 with Duplicates', ylab = "ADC2 without Duplicates",
main = "Duplicates Versus No Duplicates For \n Twelve Hour Time Aggregation of ADC2")
day.ts.adc2 <- ts(day$adc2, start = 2010, end = 2012, frequency = 365)
day.ts.adc2.nodup <- ts(day.nodup$adc2, start = 2010, end = 2012, frequency = 365)
adc2.day.r <- cor(x=day.ts.adc2, y=day.ts.adc2.nodup, use="complete.obs")
adc2.day.rsquared <- adc2.day.r^2
rmse.adc2.day <- rmse(day.ts.adc2, day.ts.adc2.nodup, na.rm=T)
plot(day.ts.adc2, day.ts.adc2.nodup, xlab = 'ADC2 with Duplicates', ylab = "ADC2 without Duplicates",
main = "Duplicates Versus No Duplicates For \n Daily Time Aggregation of ADC2")
julian_day(2002, 5, i) - julian_day(2002, 1, 1) + 1
julian_day(2003, 5, i) - julian_day(2003, 1, 1) + 1
julian_day(2003, 12, i) - julian_day(2003, 1, 1) + 1
i
julian_day(2003, 12, 1) - julian_day(2003, 1, 1) + 1
julian_day(2002, 5, 1) - julian_day(2002, 1, 1) + 1
mins.15.ts.adc0 <- ts(fifteen.minutes$adc0,  start = 2010)
mins.15.ts.adc0.nodup <- ts(fifteen.minutes.nodup$adc0, start = 2010)
adc0.15.mins.r <- cor(x=mins.15.ts.adc0, y=mins.15.ts.adc0.nodup, use="complete.obs")
adc0.15.mins.rsquared <- adc0.15.mins.r^2
rmse.adc0.15.mins <- rmse(mins.15.ts.adc0, mins.15.ts.adc0.nodup, na.rm=T)
plot(mins.15.ts.adc0, mins.15.ts.adc0.nodup, xlab = 'ADC0 with Duplicates', ylab = "ADC0 without Duplicates",
main = "Duplicates Versus No Duplicates For \n Fifteen Minute Time Aggregation of ADC0")
# Computing R, R^2, RMSE, and Plotting for ADC0
mins.15.ts.adc0 <- ts(fifteen.minutes$adc0,  start = 2010, end = 2012, frequency = 35040)
mins.15.ts.adc0.nodup <- ts(fifteen.minutes.nodup$adc0, start = 2010, end = 2012, frequency = 35040)
adc0.15.mins.r <- cor(x=mins.15.ts.adc0, y=mins.15.ts.adc0.nodup, use="complete.obs")
adc0.15.mins.rsquared <- adc0.15.mins.r^2
rmse.adc0.15.mins <- rmse(mins.15.ts.adc0, mins.15.ts.adc0.nodup, na.rm=T)
plot(mins.15.ts.adc0, mins.15.ts.adc0.nodup, xlab = 'ADC0 with Duplicates', ylab = "ADC0 without Duplicates",
main = "Duplicates Versus No Duplicates For \n Fifteen Minute Time Aggregation of ADC0")
# Computing R, R^2, RMSE, and Plotting for ADC0
mins.15.ts.adc0 <- ts(fifteen.minutes$adc0,  start = 2010, end = 2012, frequency = 35040)
mins.15.ts.adc0.nodup <- ts(fifteen.minutes.nodup$adc0, start = 2010, end = 2012, frequency = 35040)
adc0.15.mins.r <- cor(x=mins.15.ts.adc0, y=mins.15.ts.adc0.nodup, use="complete.obs")
adc0.15.mins.rsquared <- adc0.15.mins.r^2
rmse.adc0.15.mins <- rmse(mins.15.ts.adc0, mins.15.ts.adc0.nodup, na.rm=T)
plot(mins.15.ts.adc0, mins.15.ts.adc0.nodup, xlab = 'ADC0 with Duplicates', ylab = "ADC0 without Duplicates",
main = "Duplicates Versus No Duplicates For \n Fifteen Minute Time Aggregation of ADC0")
hour.ts.adc0 <- ts(sixty.minutes$adc0, start = 2010, end = 2012, frequency = 8760)
hour.ts.adc0.nodup <- ts(sixty.minutes.nodup$adc0, start = 2010, end = 2012, frequency = 8760)
adc0.hour.r <- cor(x=hour.ts.adc0, y=hour.ts.adc0.nodup, use="complete.obs")
adc0.hour.rsquared <- adc0.hour.r^2
rmse.adc0.hour <- rmse(hour.ts.adc0, hour.ts.adc0.nodup, na.rm=T)
plot(hour.ts.adc0, hour.ts.adc0.nodup, xlab = 'ADC0 with Duplicates', ylab = "ADC0 without Duplicates",
main = "Duplicates Versus No Duplicates For \n Sixty Minute Time Aggregation of ADC0")
# Computing R, R^2, RMSE, and Plotting for ADC0
mins.15.ts.adc0 <- ts(fifteen.minutes$adc0,  start = 2010, end = 2012, frequency = 35040)
mins.15.ts.adc0.nodup <- ts(fifteen.minutes.nodup$adc0, start = 2010, end = 2012, frequency = 35040)
adc0.15.mins.r <- cor(x=mins.15.ts.adc0, y=mins.15.ts.adc0.nodup, use="complete.obs")
adc0.15.mins.rsquared <- adc0.15.mins.r^2
rmse.adc0.15.mins <- rmse(mins.15.ts.adc0, mins.15.ts.adc0.nodup, na.rm=T)
plot(mins.15.ts.adc0, mins.15.ts.adc0.nodup, xlab = 'ADC0 with Duplicates', ylab = "ADC0 without Duplicates",
main = "Duplicates Versus No Duplicates For \n Fifteen Minute Time Aggregation of ADC0")
hours.12.ts.adc0 <- ts(twelve.hour$adc0, start = 2010, end = 2012, frequency = 730)
hours.12.ts.adc0.nodup <- ts(twelve.hour.nodup$adc0, start = 2010, end = 2012, frequency = 730)
adc0.hours.12.r <- cor(x=hours.12.ts.adc0, y=hours.12.ts.adc0.nodup, use="complete.obs")
adc0.hours.12.rsquared <- adc0.hours.12.r^2
rmse.adc0.hours.12 <- rmse(hours.12.ts.adc0, hours.12.ts.adc0.nodup, na.rm=T)
plot(hours.12.ts.adc0, hours.12.ts.adc0.nodup, xlab = 'ADC0 with Duplicates', ylab = "ADC0 without Duplicates",
main = "Duplicates Versus No Duplicates For \n Twelve Hour Time Aggregation of ADC0")
mins.15.ts.adc0 <- ts(fifteen.minutes$adc0,  start = 2010)
mins.15.ts.adc0.nodup <- ts(fifteen.minutes.nodup$adc0, start = 2010)
adc0.15.mins.r <- cor(x=mins.15.ts.adc0, y=mins.15.ts.adc0.nodup, use="complete.obs")
adc0.15.mins.rsquared <- adc0.15.mins.r^2
rmse.adc0.15.mins <- rmse(mins.15.ts.adc0, mins.15.ts.adc0.nodup, na.rm=T)
plot(mins.15.ts.adc0, mins.15.ts.adc0.nodup, xlab = 'ADC0 with Duplicates', ylab = "ADC0 without Duplicates",
main = "Duplicates Versus No Duplicates For \n Fifteen Minute Time Aggregation of ADC0")
savehistory("~/Desktop/rinigupta11_jpdas18_b2_exercise2_1.Rhistory")
