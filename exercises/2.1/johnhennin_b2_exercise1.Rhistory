mtext(paste("r = ",round(r15[1,1],digits=4),
'R^2 = ' ,round(r15.2[1,1],digits=4),
" rmse =",round(rmse15a0, digits=4)),
cex = .45,side = 3,line = -.7)
plot(ensemble60.org$adc0, ensemble60.nd$adc0, type = 'p', cex = .5,
xlab = "Orig. soil water potent.",
ylab = "Dup-free soil water potent.")
mtext("60 minute", cex = .7, side=3)
mtext(paste("r = ",round(r60[1,1],digits=4),
'R^2 = ' ,round(r60.2[1,1], digits=4),
" rmse =",round(rmse60a0, digits=4)),
cex = .45,side = 3,line = -.7)
plot(ensemble12.org$adc0, ensemble12.nd$adc0, type = 'p', cex = .5,
xlab = "Orig. soil water potent.",
ylab = "Dup-free soil water potent.")
mtext("12 hour", cex = .7, side=3)
mtext(paste("r = ",round(r12[1,1], digits=4),
'R^2 = ' ,round(r12.2[1,1], digits=4)
," rmse =",round(rmse12a0, digits = 4)),
cex = .45,side = 3,line = -.7)
plot(ensemble24.org$adc0, ensemble24.nd$adc0, type = 'p', cex = .5,
xlab = "Orig. soil water potent.",
ylab = "Dup-free soil water potent.")
mtext("24 hour", cex = .7, side=3)
mtext(paste("r = ",round(r24[1,1], digits = 4),
'R^2 = ' ,round(r24.2[1,1], digits = 4),
"rmse =", round(rmse24a0, digits=4)),
cex = .45,side = 3,line = -.7)
mtext("ADC1", side = 3, line = -2, outer = TRUE, cex = 2)
vwc_calc <- function(data){
# '''
# Takes an input of the dataframe column of adc1 or adc2 values
# and outputs the converted VWC, or Soil Mosture.
# outputs this value in a vector.
# '''
a = 0.00119
b = 0.401
output <- list()
for (i in 1:length(data)){
if (data[i] < 337 | data[i] > 841){
output[[i]] <- 0
}
else
{
output[[i]] <- a * data[i] - b
}
}
return(unlist(output))
}
orig.df$adc1 <- vwc_calc(orig.df$adc1)
vwc_calc(orig.df$adc1)
test <- vwc_calc(orig.df$adc1)
mean(test)
max(test)
vwc_calc <- function(data){
# '''
# Takes an input of the dataframe column of adc1 or adc2 values
# and outputs the converted VWC, or Soil Mosture.
# outputs this value in a vector.
# '''
a = 0.00119
b = 0.401
output <- list()
for (i in 1:length(data)){
if (data[i] < 337 | data[i] > 841){
output[[i]] <- 0
}
else
{
output[[i]] <- a * data[i] - b
}
}
return(unlist(output))
}
orig.df <- merge_list(list(s2003, s2015, s2025, s2045, s2055, s2065, s2085,
s2095, s2103, s2115, s2125, s2135))
# Sort by time
orig.df <- orig.df[order(orig.df$date), ]
test <- vwc_calc(orig.df$adc1)
max(test)
mean(test)
bigtest <- orig.df
bigtest$adc1 <- test
View(bigtest)
max(bigtest$adc1)
orig.df <- merge_list(list(s2003, s2015, s2025, s2045, s2055, s2065, s2085,
s2095, s2103, s2115, s2125, s2135))
nodup.df <- merge_list(list(s2003.df, s2015.df, s2025.df, s2045.df, s2055.df,
s2065.df, s2085.df, s2095.df, s2103.df, s2115.df,
s2125.df, s2135.df))
# Sort by time
orig.df <- orig.df[order(orig.df$date), ]
nodup.df <- nodup.df[order(nodup.df$date), ]
orig.df$adc1 <- vwc_calc(orig.df$adc1)
orig.df$adc2 <- vwc_calc(orig.df$adc2)
nodup.df$adc1 <- vwc_calc(nodup.df$adc1)
nodup.df$adc2 <- vwc_calc(nodup.df$adc2)
aggregate.byts <- function(orig.df, minute) {
# Define the time step for aggregation
t.step <- minute*60  # 15-minutes in seconds
# Grab the first instance of time and roll back to the earliest whole hour
#  * note: I don't know a method to find the earliest whole 15-minute
#    so this will have to do
t1 <- trunc(orig.df$date[1], "hour")
# Grab the last time
tn <- tail(orig.df, 1)$date
# Grab total number of rows
n <- length(orig.df$result_time)
# Initialize a new empty dataframe for storing ensemble means
ensemble.df <- orig.df[1==2, ]
ensemble.df <- subset(ensemble.df, select = -result_time)  # remove this column
# Initial the current time with the first time
curr.t <- t1
# The following is just an outline; needs to be completed.
while (curr.t < tn) {
next.t <- curr.t + t.step
tmp.df <- orig.df[orig.df$date >= curr.t & orig.df$date < next.t, ]
# Filter out invalid sensor measurements
#tmp.df <- tmp.df[tmp.df$adc0 >= 500 & tmp.df$adc0 <= 1000]
#tmp.df <- tmp.df[tmp.df$adc1 >= 250 & tmp.df$adc1 <= 1000]
#tmp.df <- tmp.df[tmp.df$adc2 >= 250 & tmp.df$adc2 <= 1000]
tmp <- data.frame(mean(as.integer(tmp.df$adc0)),
mean(as.integer(tmp.df$adc1)),
mean(as.integer(tmp.df$adc2)))
if (is.nan(mean(tmp.df$adc0))) {
tmp <- data.frame(0, 0, 0)
}
names(tmp) <- c("adc0", "adc1", "adc2")
ensemble.df <- rbind(ensemble.df, tmp)
# Compute the average for valid sensor measurements based on this subset
# (see ranges for valid sensor measurements) and add values with time
# to the new dataframe
#print(length(tmp.df$result_time))
#print(ensemble.df)
# Update time
curr.t <- curr.t + t.step
}
#print('done')
return(ensemble.df)
}
ensemble15.org <- aggregate.byts(orig.df = orig.df, 15)
ensemble60.org <- aggregate.byts(orig.df = orig.df, 60)
ensemble12.org <- aggregate.byts(orig.df = orig.df, 12*60)
ensemble24.org <- aggregate.byts(orig.df = orig.df, 24*60)
ensemble15.nd <- aggregate.byts(orig.df = nodup.df, 15)
ensemble60.nd <- aggregate.byts(orig.df = nodup.df, 60)
ensemble12.nd <- aggregate.byts(orig.df = nodup.df, 12*60)
ensemble24.nd <- aggregate.byts(orig.df = nodup.df, 24*60)
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Calculate Pearson's R, R-Squared, and RMSE
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 15 minutes, Pearson's R
r15 <- cor(ensemble15.org, ensemble15.nd, method = 'pearson')
# 60 minutes, Pearson's R
r60 <- cor(ensemble60.org, ensemble60.nd, method = 'pearson')
# 12 hours, Pearson's R
r12 <- cor(ensemble12.org, ensemble12.nd, method = 'pearson')
# 24 hours, Pearson's R
r24 <- cor(ensemble24.org, ensemble24.nd, method = 'pearson')
#-------------------------------------------------------------
# 15 minutes, R-Squared
r15.2 <- r15^2
# 60 minutes, R-Squared
r60.2 <- r60^2
# 12 hours, R-Squared
r12.2 <- r12^2
# 24 hours, R-Squared
r24.2 <- r24^2
#-------------------------------------------------------------
# 15 minutes, RMSE
rmse15a0 <- rmse(ensemble15.org$adc0, ensemble15.nd$adc0)
rmse15a1 <- rmse(ensemble15.org$adc1, ensemble15.nd$adc1)
rmse15a2 <- rmse(ensemble15.org$adc2, ensemble15.nd$adc2)
# 60 minutes, RMSE
rmse60a0 <- rmse(ensemble60.org$adc0, ensemble60.nd$adc0)
rmse60a1 <- rmse(ensemble60.org$adc1, ensemble60.nd$adc1)
rmse60a2 <- rmse(ensemble60.org$adc2, ensemble60.nd$adc2)
# 12 hours, RMSE
rmse12a0 <- rmse(ensemble12.org$adc0, ensemble12.nd$adc0)
rmse12a1 <- rmse(ensemble12.org$adc1, ensemble12.nd$adc1)
rmse12a2 <- rmse(ensemble12.org$adc2, ensemble12.nd$adc2)
# 24 hours, RMSE
rmse24a0 <- rmse(ensemble24.org$adc0, ensemble24.nd$adc0)
rmse24a1 <- rmse(ensemble24.org$adc1, ensemble24.nd$adc1)
rmse24a2 <- rmse(ensemble24.org$adc2, ensemble24.nd$adc2)
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Plots
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# adc0  --------------------------------------------------------------
par(mfrow=c(2,2))
par(pty = "s", pin = c(.65,.65), cxy = c(.015,.015),
mar=c(4,4,3.5,3.5), oma = c(0, 0, 0, 0))
plot(ensemble15.org$adc0, ensemble15.nd$adc0, type = 'p', cex = .5,
xlab = "Orig. soil water potent.",
ylab = "Dup-free soil water potent.")
mtext("15 minute", cex = .7, side=3)
mtext(paste("r = ",round(r15[1,1],digits=4),
'R^2 = ' ,round(r15.2[1,1],digits=4),
" rmse =",round(rmse15a0, digits=4)),
cex = .45,side = 3,line = -.7)
plot(ensemble60.org$adc0, ensemble60.nd$adc0, type = 'p', cex = .5,
xlab = "Orig. soil water potent.",
ylab = "Dup-free soil water potent.")
mtext("60 minute", cex = .7, side=3)
mtext(paste("r = ",round(r60[1,1],digits=4),
'R^2 = ' ,round(r60.2[1,1], digits=4),
" rmse =",round(rmse60a0, digits=4)),
cex = .45,side = 3,line = -.7)
plot(ensemble12.org$adc0, ensemble12.nd$adc0, type = 'p', cex = .5,
xlab = "Orig. soil water potent.",
ylab = "Dup-free soil water potent.")
mtext("12 hour", cex = .7, side=3)
mtext(paste("r = ",round(r12[1,1], digits=4),
'R^2 = ' ,round(r12.2[1,1], digits=4)
," rmse =",round(rmse12a0, digits = 4)),
cex = .45,side = 3,line = -.7)
plot(ensemble24.org$adc0, ensemble24.nd$adc0, type = 'p', cex = .5,
xlab = "Orig. soil water potent.",
ylab = "Dup-free soil water potent.")
mtext("24 hour", cex = .7, side=3)
mtext(paste("r = ",round(r24[1,1], digits = 4),
'R^2 = ' ,round(r24.2[1,1], digits = 4),
"rmse =", round(rmse24a0, digits=4)),
cex = .45,side = 3,line = -.7)
mtext("ADC0", side = 3, line = -2, outer = TRUE, cex = 2)
# adc1 --------------------------------------------------------------
par(mfrow=c(2,2))
par(pty = "s", pin = c(.65,.65), cxy = c(.015,.015),
mar=c(4,4,3.5,3.5), oma = c(0, 0, 0, 0))
plot(ensemble15.org$adc1, ensemble15.nd$adc1, type = 'p', cex = .5,
xlab = "Orig. soil moisture",
ylab = "Dup-free soil moisture")
mtext("15 minute", cex = .7, side=3)
mtext(paste("r = ",round(r15[2,2],digits=4),
'R^2 = ' ,round(r15.2[2,2],digits=4),
" rmse =",round(rmse15a1, digits=4)),
cex = .45,side = 3,line = -.7)
plot(ensemble60.org$adc1, ensemble60.nd$adc1, type = 'p', cex = .5,
xlab = "Orig. soil moisture",
ylab = "Dup-free soil moisture")
mtext("60 minute", cex = .7, side=3)
mtext(paste("r = ",round(r60[2,2],digits=4),
'R^2 = ' ,round(r60.2[2,2], digits=4),
" rmse =",round(rmse60a1, digits=4)),
cex = .45,side = 3,line = -.7)
plot(ensemble12.org$adc1, ensemble12.nd$adc1, type = 'p', cex = .5,
xlab = "Orig. soil moisture",
ylab = "Dup-free soil moisture")
mtext("12 hour", cex = .7, side=3)
mtext(paste("r = ",round(r12[2,2], digits=4),
'R^2 = ' ,round(r12.2[2,2], digits=4)
," rmse =",round(rmse12a1, digits = 4)),
cex = .45,side = 3,line = -.7)
plot(ensemble24.org$adc1, ensemble24.nd$adc1, type = 'p', cex = .5,
xlab = "Orig. soil moisture",
ylab = "Dup-free soil moisture")
mtext("24 hour", cex = .7, side=3)
mtext(paste("r = ",round(r24[2,2], digits = 4),
'R^2 = ' ,round(r24.2[2,2], digits = 4),
"rmse =", round(rmse24a1, digits=4)),
cex = .45,side = 3,line = -.7)
mtext("ADC1", side = 3, line = -2, outer = TRUE, cex = 2)
# adc2 --------------------------------------------------------------
par(mfrow=c(2,2))
par(pty = "s", pin = c(.65,.65), cxy = c(.015,.015),
mar=c(4,4,3.5,3.5), oma = c(0, 0, 0, 0))
plot(ensemble15.org$adc2, ensemble15.nd$adc2, type = 'p', cex = .5,
xlab = "Orig. soil moisture",
ylab = "Dup-free soil moisture")
mtext("15 minute", cex = .7, side=3)
mtext(paste("r = ",round(r15[3,3],digits=4),
'R^2 = ' ,round(r15.2[3,3],digits=4),
" rmse =",round(rmse15a2, digits=4)),
cex = .45,side = 3,line = -.7)
plot(ensemble60.org$adc2, ensemble60.nd$adc2, type = 'p', cex = .5,
xlab = "Orig. soil moisture",
ylab = "Dup-free soil moisture")
mtext("60 minute", cex = .7, side=3)
mtext(paste("r = ",round(r60[3,3],digits=4),
'R^2 = ' ,round(r60.2[3,3], digits=4),
" rmse =",round(rmse60a2, digits=4)),
cex = .45,side = 3,line = -.7)
plot(ensemble12.org$adc2, ensemble12.nd$adc2, type = 'p', cex = .5,
xlab = "Orig. soil moisture",
ylab = "Dup-free soil moisture")
mtext("12 hour", cex = .7, side=3)
mtext(paste("r = ",round(r12[3,3], digits=4),
'R^2 = ' ,round(r12.2[3,3], digits=4)
," rmse =",round(rmse12a2, digits = 4)),
cex = .45,side = 3,line = -.7)
plot(ensemble24.org$adc2, ensemble24.nd$adc2, type = 'p', cex = .5,
xlab = "Orig. soil moisture",
ylab = "Dup-free soil moisture")
mtext("24 hour", cex = .7, side=3)
mtext(paste("r = ",round(r24[3,3], digits = 4),
'R^2 = ' ,round(r24.2[3,3], digits = 4),
"rmse =", round(rmse24a2, digits=4)),
cex = .45,side = 3,line = -.7)
mtext("ADC2", side = 3, line = -2, outer = TRUE, cex = 2)
swp_calc <- function(data){
# '''
# Takes an input of the dataframe column of adc0 values
# and outputs the converted SWP, or soil water potential.
# outputs this value in a vector.
# '''
a <- 0.000048
b <- 0.0846
c <- 39.45
output <- list()
for (i in 1:length(data)){
if (data[i] < 591 | data[i] > 841){
output[[i]] = 0
}
else
{
output[[i]] = -1.0*exp( (a * data[i] * data[i]) - (b * data[i]) + c )
}
}
return(unlist(output))
}
orig.df <- merge_list(list(s2003, s2015, s2025, s2045, s2055, s2065, s2085,
s2095, s2103, s2115, s2125, s2135))
nodup.df <- merge_list(list(s2003.df, s2015.df, s2025.df, s2045.df, s2055.df,
s2065.df, s2085.df, s2095.df, s2103.df, s2115.df,
s2125.df, s2135.df))
# Sort by time
orig.df <- orig.df[order(orig.df$date), ]
nodup.df <- nodup.df[order(nodup.df$date), ]
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Converting values
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
swp_calc <- function(data){
# '''
# Takes an input of the dataframe column of adc0 values
# and outputs the converted SWP, or soil water potential.
# outputs this value in a vector.
# '''
a <- 0.000048
b <- 0.0846
c <- 39.45
output <- list()
for (i in 1:length(data)){
if (data[i] < 591 | data[i] > 841){
output[[i]] = 0
}
else
{
output[[i]] = -1.0*exp( (a * data[i] * data[i]) - (b * data[i]) + c )
}
}
return(unlist(output))
}
vwc_calc <- function(data){
# '''
# Takes an input of the data frame column of adc1 or adc2 values
# and outputs the converted VWC, or Soil Moisture.
# outputs this value in a vector.
# '''
a = 0.00119
b = 0.401
output <- list()
for (i in 1:length(data)){
if (data[i] < 337 | data[i] > 841){
output[[i]] <- 0
}
else
{
output[[i]] <- a * data[i] - b
}
}
return(unlist(output))
}
orig.df$adc0 <- swp_calc(orig.df$adc0)
orig.df$adc1 <- vwc_calc(orig.df$adc1)
orig.df$adc2 <- vwc_calc(orig.df$adc2)
nodup.df$adc0 <- swp_calc(nodup.df$adc0)
nodup.df$adc1 <- vwc_calc(nodup.df$adc1)
nodup.df$adc2 <- vwc_calc(nodup.df$adc2)
source('johnhennin_b2_utility.R')
source('./johnhennin_b2_utility.R')
source('johnhennin_b2_utility.R')
source('johnhennin_b2_utility.R')
aggregate.byts <- function(orig.df, minute) {
# Define the time step for aggregation
t.step <- minute*60  # 15-minutes in seconds
# Grab the first instance of time and roll back to the earliest whole hour
#  * note: I don't know a method to find the earliest whole 15-minute
#    so this will have to do
t1 <- trunc(orig.df$date[1], "hour")
# Grab the last time
tn <- tail(orig.df, 1)$date
# Grab total number of rows
n <- length(orig.df$result_time)
# Initialize a new empty dataframe for storing ensemble means
ensemble.df <- orig.df[1==2, ]
ensemble.df <- subset(ensemble.df, select = -result_time)  # remove this column
# Initial the current time with the first time
curr.t <- t1
# The following is just an outline; needs to be completed.
while (curr.t < tn) {
next.t <- curr.t + t.step
tmp.df <- orig.df[orig.df$date >= curr.t & orig.df$date < next.t, ]
# Filter out invalid sensor measurements
#tmp.df <- tmp.df[tmp.df$adc0 >= 500 & tmp.df$adc0 <= 1000]
#tmp.df <- tmp.df[tmp.df$adc1 >= 250 & tmp.df$adc1 <= 1000]
#tmp.df <- tmp.df[tmp.df$adc2 >= 250 & tmp.df$adc2 <= 1000]
tmp <- data.frame(mean(as.integer(tmp.df$adc0)),
mean(as.integer(tmp.df$adc1)),
mean(as.integer(tmp.df$adc2)))
if (is.nan(mean(tmp.df$adc0))) {
tmp <- data.frame(0, 0, 0)
}
names(tmp) <- c("adc0", "adc1", "adc2")
ensemble.df <- rbind(ensemble.df, tmp)
# Compute the average for valid sensor measurements based on this subset
# (see ranges for valid sensor measurements) and add values with time
# to the new dataframe
#print(length(tmp.df$result_time))
#print(ensemble.df)
# Update time
curr.t <- curr.t + t.step
}
#print('done')
return(ensemble.df)
}
ensemble15.org <- aggregate.byts(orig.df = orig.df, 15)
ensemble60.org <- aggregate.byts(orig.df = orig.df, 60)
ensemble12.org <- aggregate.byts(orig.df = orig.df, 12*60)
ensemble24.org <- aggregate.byts(orig.df = orig.df, 24*60)
ensemble15.nd <- aggregate.byts(orig.df = nodup.df, 15)
ensemble60.nd <- aggregate.byts(orig.df = nodup.df, 60)
ensemble12.nd <- aggregate.byts(orig.df = nodup.df, 12*60)
ensemble24.nd <- aggregate.byts(orig.df = nodup.df, 24*60)
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Calculate Pearson's R, R-Squared, and RMSE
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 15 minutes, Pearson's R
r15 <- cor(ensemble15.org, ensemble15.nd, method = 'pearson')
# 60 minutes, Pearson's R
r60 <- cor(ensemble60.org, ensemble60.nd, method = 'pearson')
# 12 hours, Pearson's R
r12 <- cor(ensemble12.org, ensemble12.nd, method = 'pearson')
# 24 hours, Pearson's R
r24 <- cor(ensemble24.org, ensemble24.nd, method = 'pearson')
#-------------------------------------------------------------
# 15 minutes, R-Squared
r15.2 <- r15^2
# 60 minutes, R-Squared
r60.2 <- r60^2
# 12 hours, R-Squared
r12.2 <- r12^2
# 24 hours, R-Squared
r24.2 <- r24^2
#-------------------------------------------------------------
# 15 minutes, RMSE
rmse15a0 <- rmse(ensemble15.org$adc0, ensemble15.nd$adc0)
rmse15a1 <- rmse(ensemble15.org$adc1, ensemble15.nd$adc1)
rmse15a2 <- rmse(ensemble15.org$adc2, ensemble15.nd$adc2)
# 60 minutes, RMSE
rmse60a0 <- rmse(ensemble60.org$adc0, ensemble60.nd$adc0)
rmse60a1 <- rmse(ensemble60.org$adc1, ensemble60.nd$adc1)
rmse60a2 <- rmse(ensemble60.org$adc2, ensemble60.nd$adc2)
# 12 hours, RMSE
rmse12a0 <- rmse(ensemble12.org$adc0, ensemble12.nd$adc0)
rmse12a1 <- rmse(ensemble12.org$adc1, ensemble12.nd$adc1)
rmse12a2 <- rmse(ensemble12.org$adc2, ensemble12.nd$adc2)
# 24 hours, RMSE
rmse24a0 <- rmse(ensemble24.org$adc0, ensemble24.nd$adc0)
rmse24a1 <- rmse(ensemble24.org$adc1, ensemble24.nd$adc1)
rmse24a2 <- rmse(ensemble24.org$adc2, ensemble24.nd$adc2)
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Plots
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# adc0  --------------------------------------------------------------
par(mfrow=c(2,2))
par(pty = "s", pin = c(.65,.65), cxy = c(.015,.015),
mar=c(4,4,3.5,3.5), oma = c(0, 0, 0, 0))
plot(ensemble15.org$adc0, ensemble15.nd$adc0, type = 'p', cex = .5,
xlab = "Orig. soil water potent.",
ylab = "Dup-free soil water potent.")
mtext("15 minute", cex = .7, side=3)
mtext(paste("r = ",round(r15[1,1],digits=4),
'R^2 = ' ,round(r15.2[1,1],digits=4),
" rmse =",round(rmse15a0, digits=4)),
cex = .45,side = 3,line = -.7)
plot(ensemble60.org$adc0, ensemble60.nd$adc0, type = 'p', cex = .5,
xlab = "Orig. soil water potent.",
ylab = "Dup-free soil water potent.")
mtext("60 minute", cex = .7, side=3)
mtext(paste("r = ",round(r60[1,1],digits=4),
'R^2 = ' ,round(r60.2[1,1], digits=4),
" rmse =",round(rmse60a0, digits=4)),
cex = .45,side = 3,line = -.7)
plot(ensemble12.org$adc0, ensemble12.nd$adc0, type = 'p', cex = .5,
xlab = "Orig. soil water potent.",
ylab = "Dup-free soil water potent.")
mtext("12 hour", cex = .7, side=3)
mtext(paste("r = ",round(r12[1,1], digits=4),
'R^2 = ' ,round(r12.2[1,1], digits=4)
," rmse =",round(rmse12a0, digits = 4)),
cex = .45,side = 3,line = -.7)
plot(ensemble24.org$adc0, ensemble24.nd$adc0, type = 'p', cex = .5,
xlab = "Orig. soil water potent.",
ylab = "Dup-free soil water potent.")
mtext("24 hour", cex = .7, side=3)
mtext(paste("r = ",round(r24[1,1], digits = 4),
'R^2 = ' ,round(r24.2[1,1], digits = 4),
"rmse =", round(rmse24a0, digits=4)),
cex = .45,side = 3,line = -.7)
mtext("ADC0", side = 3, line = -2, outer = TRUE, cex = 2)
savehistory('johnhennin_b2.Rhistory')
savehistory('johnhennin_b2.Rhistory')
