hn <- 180 # Net radiation is positive all day
} else {
hn <- acos((rnl - rw*ru)/(rw*rv))
hn <- hn/pir
}
solar$hn_deg <- hn
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 13. Calculate daytime net radiation (rn_d), J/m^2
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rn_d <- (86400/pi)*(hn*pir*(rw*ru - rnl) + rw*rv*dsin(hn))
solar$rn_j.m2 <- rn_d
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 14. Calculate nighttime net radiation (rnn_d), J/m^2
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# fixed iss#13
rnn_d <- (86400/pi)*(
rw*rv*(dsin(hs) - dsin(hn)) +
rw*ru*(hs - hn)*pir -
rnl*(pi - hn*pir)
)
solar$rnn_j.m2 <- rnn_d
# ~~~~~~~~~~~~~~~~~~~~~~~~~~ RETURN VALUES ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
return(solar)
}
# ************************************************************************
# Name:     julian_day
# Inputs:   - double, year (y)
#           - double, month (m)
#           - double, day of month (i)
# Returns:  double, Julian day
# Features: This function converts a date in the Gregorian calendar
#           to a Julian day number (i.e., a method of consecutative
#           numbering of days---does not have anything to do with
#           the Julian calendar!)
#           * valid for dates after -4712 January 1 (i.e., jde >= 0)
# Ref:      Eq. 7.1 J. Meeus (1991), Chapter 7 "Julian Day", Astronomical
#             Algorithms
# ************************************************************************
julian_day <- function(y, m, i) {
if (m <= 2) {
y <- y - 1
m <- m + 12
}
a <- floor(y/100)
b <- 2 - a + floor(a/4)
jde <- floor(365.25*(y + 4716)) + floor(30.6001*(m + 1)) + i + b - 1524.5
return(jde)
}
# ---------------------------------------------------------------------------
#                            END SPLASH CODE
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
#                            BEGIN NEW CODE
# ---------------------------------------------------------------------------
# ************************************************************************
# Name:     spencer_eot
# Input:    - int, day of the year (n)
#           - int, days in current year (N)
# Output:   float, equation of time, hours
# Features: Returns the equation of time
# Depends:  - dcos
#           - dsin
# Ref:      Spencer, J.W. (1971), Fourier series representation of the
#           position of the sun, Search, 2 (5), p. 172.
# ************************************************************************
spencer_eot <- function(n, N) {
B <- 2.0*pi*(n - 1.0)/N
my_eot <- (7.5e-6)
my_eot <- my_eot + (1.868e-3)*dcos(B)
my_eot <- my_eot - (3.2077e-2)*dsin(B)
my_eot <- my_eot - (1.4615e-2)*dcos(2.0*B)
my_eot <- my_eot - (4.0849e-2)*dsin(2.0*B)
my_eot <- my_eot * (12.0/pi)
return(my_eot)
}
# ************************************************************************
# Name:     calc_daily_fluxes
# Inputs:   - float, latitude, degrees N (lat)
#           - float, longitude, degrees E (lon)
#           - int, day of year (n)
#           - float, elevation above mean sea level, m (elv)
#           - int, current year (y)
# Returns:  list object (solar)
# Features: Calculates the half-hourly extraterrestrial solar radiation
#           flux based on the GePiSaT model.
# Depends:  - calc_daily_solar
#           - dcos
#           - spencer_eot
# Ref:      solar.py from the gepisat module of py_version
#           https://bitbucket.org/labprentice/gepisat/src/master/
# ************************************************************************
calc_daily_fluxes <- function(lat, lon, n, elv, y){
# ~~~~~~~~~~~~~~~~~~~~~~~ FUNCTION VARIABLES ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
solar <- list()
# Take advantage of our existing function
daily.solar <- calc_daily_solar(lat, n, elv, y)
dr <- daily.solar$dr
ru <- daily.solar$ru
rv <- daily.solar$rv
kN <- daily.solar$kN
# What do we need?
# x io_hh (<-- the half-hourly Io values we want!)
#   x w_hh
#     x ts_hh
#       x local_hh
#       x eot (create spencer_eot function)
#       x lonc
#         x lon (added to input)
#         x tz_hour
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create local time series, hours
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
local_hh <- seq(from = 0, to = 23.5, by = 0.5)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Calculate time zone hour, hours
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
if (lon < 0) {
# Swap sign to "round down" negative numbers:
temp_lon <- -1.0*lon
temp_tzh <- floor(temp_lon/15)  # floor makes integers
tz_hour <- -1.0*temp_tzh        # out of floats
} else {
tz_hour <- floor(lon/15)
}
solar$tz_hour <- tz_hour
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Calculate the equation of time, hours
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Spencer (1971)
eot <- spencer_eot(n, kN)
solar$eot_hour <- eot
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Calculate the longitude correction, hours
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
lonc <- (15.0*tz_hour - lon)/15.0
solar$lc_hour <- lonc
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Calculate the solar time, hours
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ts_hh <- local_hh + eot - lonc
solar$ts_hh <- ts_hh
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Calculate the hour angle, degrees
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
w_hh <- (360./24.)*(ts_hh - 12.0)
solar$w_hh <- w_hh
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Calculate the half-hourly solar radiation flux, W/m^2
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
io_hh <- kGsc*dr*(ru + rv*dcos(w_hh))
io_hh[io_hh < 0] <- 0  # UPDATED FROM numpy.clip
solar$io_wm2 <- io_hh
return(solar)
}
# ---------------------------------------------------------------------------
#                            TESTING (US-Goo)
# ---------------------------------------------------------------------------
my.lat <- 34.2547
my.lon <- -89.8735
my.elv <- 87
my.n <- 230
my.y <- 2021
my.solar <- calc_daily_fluxes(my.lat, my.lon, my.n, my.elv, my.y)
View(my.solar)
my.solar
# Read data into a data frame
flux12.url <- "https://ds-wm.github.io/course/atsa/data/FLX_US-Goo_FLUXNET2015_SUBSET_HH_2003-12_1-4.csv"
flux12.df <- read.csv(flux12.url)
# Extract the variable of interest and fix NA values (-9999)
# see "missing data" here: https://fluxnet.org/data/aboutdata/data-variables/
flux12.ppfd <- flux12.df$PPFD_IN
flux12.ppfd[which(flux12.ppfd == -9999)] <- NA
options(repr.plot.width=14, repr.plot.height=6, repr.plot.res = 125)
plot(
flux12.ppfd,
type = 'l',
xlab = "Half-hourly samples",
ylab = bquote("PPFD " ~ mu ~ "mol" ~ m^{-2} ~ s^{-1}),
main = "Missing Photosynthetic Radiation - AmeriFlux US-Goo (2003-12)"
)
View(my.solar)
View(my.solar)
my.solar$io_wm2
length(my.solar$io_wm2)
which(max(my.solar$io_wm2))
which.max(my.solar$io_wm2)
df <- data.frame(matrix(ncol=2, nrow = 1488))
names(df) <-c("Day", "Io")
View(df)
df <- data.frame(matrix(ncol=2, nrow = 0))
names(df) <-c("Day", "Io")
View(df)
df <- data.frame(matrix(ncol=2, nrow = 0))
names(df) <-c("Day", "Io")
for (n in 335:365){
tmp.var <- calc_daily_fluxes(my.lat, my.lon, n, my.elv, 2003)
for (i in tmp.var$io_wm2){
tmp.df <- data.frame(n, i)
names(tmp.df) <-c("Day", "Io")
df <- rbind(df,tmp.df)
}
}
View(df)
df.io <- data.frame(matrix(ncol=2, nrow = 0))
names(df) <-c("Day", "Io")
for (n in 335:365){
tmp.var <- calc_daily_fluxes(my.lat, my.lon, n, my.elv, 2003)
for (i in tmp.var$io_wm2){
tmp.df <- data.frame(n, i)
names(tmp.df) <-c("Day", "Io")
df <- rbind(df,tmp.df)
}
}
df.io <- data.frame(matrix(ncol=2, nrow = 0))
names(df) <-c("Day", "Io")
for (n in 335:365){
tmp.var <- calc_daily_fluxes(my.lat, my.lon, n, my.elv, 2003)
for (i in tmp.var$io_wm2){
tmp.df <- data.frame(n, i)
names(tmp.df) <-c("Day", "Io")
df <- rbind(df,tmp.df)
}
}
View(df)
df.io <- data.frame(matrix(ncol=2, nrow = 0))
names(df) <-c("Day", "Io")
for (n in 335:365){
tmp.var <- calc_daily_fluxes(my.lat, my.lon, n, my.elv, 2003)
for (i in tmp.var$io_wm2){
tmp.df <- data.frame(n, i)
names(tmp.df) <-c("Day", "Io")
df <- rbind(df.io,tmp.df)
}
}
df.io <- data.frame(matrix(ncol=2, nrow = 0))
names(df.io) <-c("Day", "Io")
for (n in 335:365){
tmp.var <- calc_daily_fluxes(my.lat, my.lon, n, my.elv, 2003)
for (i in tmp.var$io_wm2){
tmp.df <- data.frame(n, i)
names(tmp.df) <-c("Day", "Io")
df.io <- rbind(df.io,tmp.df)
}
}
df.ho <- data.frame(matrix(ncol=2, nrow = 0))
names(df.ho) <-c("Day", "Ho")
for (n in 335:365){
tmp.var <- calc_daily_solar(my.lat, n, my.elv, 2003)
for (i in tmp.var$ra_j.m2){
tmp.df <- data.frame(n, i)
names(tmp.df) <-c("Day", "Ho")
df.ho <- rbind(df.ho,tmp.df)
}
}
View(df.ho)
View(df.io)
watch.url <- "https://ds-wm.github.io/course/atsa/data/watch_swdown_us-goo.csv"
watch.df <- read.csv(watch.url)
watch.df[, c("DayOfMonth", "SWdown_2003.12")]
df.sw <- data.frame(matrix(ncol=2, nrow = 0))
names(df.sw) <-c("Day", "SWd")
df.sw <- watch.df[, c("DayOfMonth", "SWdown_2003.12")]
View(df.sw)
names(df.sw) <-c("Day", "SWd")
df.all <- data.frame(matrix(nrow=0, ncol = 4))
names(df.all) <-c("Day", "Io", "Ho", "SWd")
View(df.all)
df.all$Day <- df.io$Day
df.all$Day <- df.io$Day
df.all <- data.frame(matrix(nrow=1488, ncol = 4))
names(df.all) <-c("Day", "Io", "Ho", "SWd")
df.all$Day <- df.io$Day
View(df.all)
df.sw$Day <- df.sw$Day + 334
View(df.sw)
df.all$Io <- df.io$Io
df.all$Day[1]
for (n in 1:1488){
df.all$Ho[n] <- df.ho$Ho[which(df.ho$Day==df.all$Day[n])]
}
View(df.all)
View(df.ho)
for (n in 1:1488){
df.all$Ho[n] <- df.ho$Ho[which(df.ho$Day==df.all$Day[n])]
df.all$SWd[n] <- df.sw$SWd[which(df.sw$Day==df.all$Day[n])]
}
df.all <- data.frame(matrix(nrow=1488, ncol = 5))
names(df.all) <-c("Day", "Io", "Ho", "SWd", "Qg")
df.all$Day <- df.io$Day
df.all$Io <- df.io$Io
for (n in 1:1488){
df.all$Ho[n] <- df.ho$Ho[which(df.ho$Day==df.all$Day[n])]
df.all$SWd[n] <- df.sw$SWd[which(df.sw$Day==df.all$Day[n])]
}
for (n in 1:1488){
df.all$Ho[n] <- df.ho$Ho[which(df.ho$Day==df.all$Day[n])]
df.all$SWd[n] <- df.sw$SWd[which(df.sw$Day==df.all$Day[n])]
df.all$Qg[n] <- 2.04*(df.all$SWd[n]/df.all$Ho[n])*df.all$Io
}
df.sw$SWd <- df.sw$SWd*86400
for (n in 1:1488){
df.all$Ho[n] <- df.ho$Ho[which(df.ho$Day==df.all$Day[n])]
df.all$SWd[n] <- df.sw$SWd[which(df.sw$Day==df.all$Day[n])]
df.all$Qg[n] <- 2.04*(df.all$SWd[n]/df.all$Ho[n])*df.all$Io
}
numeric("4")
numeric(4)
type(df.all$SWd)
type(df.all$SWd[1])
df.all$SWd[1]
df.all$SWd[1] * 2
df.all$Ho[1]
df.all$SWd[1]/df.all$Ho[1]
df.all$SWd[1]/df.all$Ho[1]*df.all$Io[1]
df.all$Io[1]
df.all$Io[35]
t <-35
df.all$SWd[t]/df.all$Ho[t]
df.all$SWd[t]/df.all$Ho[t]*df.all$Io[t]
df.all$SWd[t]/df.all$Ho[t]*df.all$Io[t]*2.04
(df.all$SWd[t]/df.all$Ho[t])*df.all$Io[t]*2.04
for (n in 1:1488){
df.all$Ho[n] <- df.ho$Ho[which(df.ho$Day==df.all$Day[n])]
df.all$SWd[n] <- df.sw$SWd[which(df.sw$Day==df.all$Day[n])]
df.all$Qg[n] <- *df.all$SWd[n]/df.all$Ho[n])*df.all$Io[n]*2.04
}
for (n in 1:1488){
df.all$Ho[n] <- df.ho$Ho[which(df.ho$Day==df.all$Day[n])]
df.all$SWd[n] <- df.sw$SWd[which(df.sw$Day==df.all$Day[n])]
df.all$Qg[n] <- (df.all$SWd[n]/df.all$Ho[n])*df.all$Io[n]*2.04
}
plot(
df.all,
type = 'l',
xlab = "Half-hourly samples",
ylab = bquote("PPFD " ~ mu ~ "mol" ~ m^{-2} ~ s^{-1}),
main = "Missing Photosynthetic Radiation - AmeriFlux US-Goo (2003-12)"
)
plot(
df.all$Qg,
type = 'l',
xlab = "Half-hourly samples",
ylab = bquote("PPFD " ~ mu ~ "mol" ~ m^{-2} ~ s^{-1}),
main = "Missing Photosynthetic Radiation - AmeriFlux US-Goo (2003-12)"
)
filled.df <- flux12.ppfd
for (n in 1:1488){
df.all$Ho[n] <- df.ho$Ho[which(df.ho$Day==df.all$Day[n])]
df.all$SWd[n] <- df.sw$SWd[which(df.sw$Day==df.all$Day[n])]
df.all$Qg[n] <- (df.all$SWd[n]/df.all$Ho[n])*df.all$Io[n]*2.04
if (is.na(filled.df[n])){
filled.df[n] <- df.all$Qg[n]
}
}
options(repr.plot.width=14, repr.plot.height=6, repr.plot.res = 125)
plot(
flux12.ppfd,
type = 'l',
xlab = "Half-hourly samples",
ylab = bquote("PPFD " ~ mu ~ "mol" ~ m^{-2} ~ s^{-1}),
main = "Missing Photosynthetic Radiation - AmeriFlux US-Goo (2003-12)"
)
plot(filled.df, type='l', col = 'red')
plot(flux12.ppfd, type = 'l', col = 'black')
plot(filled.df, type='l', col = 'red')
plot(flux12.ppfd, type = 'l', col = 'black')
lines(filled.df, col = 'red')
plot(filled.df, type = 'l', col = 'red')
lines(flux12.ppfd,col = 'black')
# Plot the data w/ gaps
options(repr.plot.width=14, repr.plot.height=6, repr.plot.res = 125)
plot(
filled.df,
type = 'l',
lty = 2,
col = 'red',
xlab = "Half-hourly samples",
ylab = bquote("PPFD " ~ mu ~ "mol" ~ m^{-2} ~ s^{-1}),
main = "Photosynthetic Radiation - AmeriFlux US-Goo (2003-12)",
)
lines(flux12.ppfd,col = 'black')
legend(1, 90, legend=c("Gap-filled", "Original"), col=c('red', 'black'), lty = c(2,1))
# Plot the data w/ gaps
options(repr.plot.width=14, repr.plot.height=6, repr.plot.res = 125)
plot(
filled.df,
type = 'l',
lty = 2,
col = 'red',
xlab = "Half-hourly samples",
ylab = bquote("PPFD " ~ mu ~ "mol" ~ m^{-2} ~ s^{-1}),
main = "Photosynthetic Radiation - AmeriFlux US-Goo (2003-12)",
)
lines(flux12.ppfd,col = 'black')
legend(1, 1000, legend=c("Gap-filled", "Original"), col=c('red', 'black'), lty = c(2,1))
# Plot the data w/ gaps
options(repr.plot.width=14, repr.plot.height=6, repr.plot.res = 125)
plot(
filled.df,
type = 'l',
lty = 2,
col = 'red',
xlab = "Half-hourly samples",
ylab = bquote("PPFD " ~ mu ~ "mol" ~ m^{-2} ~ s^{-1}),
main = "Photosynthetic Radiation - AmeriFlux US-Goo (2003-12)",
)
lines(flux12.ppfd,col = 'black')
legend(750, 1000, legend=c("Gap-filled", "Original"), col=c('red', 'black'), lty = c(2,1))
# Plot the data w/ gaps
options(repr.plot.width=14, repr.plot.height=6, repr.plot.res = 125)
plot(
filled.df,
type = 'l',
lty = 2,
col = 'red',
xlab = "Half-hourly samples",
ylab = bquote("PPFD " ~ mu ~ "mol" ~ m^{-2} ~ s^{-1}),
main = "Photosynthetic Radiation - AmeriFlux US-Goo (2003-12)",
)
lines(flux12.ppfd,col = 'black')
legend(500, 1000, legend=c("Gap-filled", "Original"), col=c('red', 'black'), lty = c(2,1))
options(repr.plot.width=14, repr.plot.height=6, repr.plot.res = 125)
plot(
filled.df,
type = 'l',
lty = 2,
col = 'red',
xlab = "Half-hourly samples",
ylab = bquote("PPFD " ~ mu ~ "mol" ~ m^{-2} ~ s^{-1}),
main = "Photosynthetic Radiation - AmeriFlux US-Goo (2003-12)",
)
lines(flux12.ppfd,col = 'black')
legend(500, 1100, legend=c("Gap-filled", "Original"), col=c('red', 'black'), lty = c(2,1))
# Plot the data w/ gaps
options(repr.plot.width=14, repr.plot.height=6, repr.plot.res = 125)
plot(
filled.df,
type = 'l',
lty = 2,
col = 'red',
xlab = "Half-hourly samples",
ylab = bquote("PPFD " ~ mu ~ "mol" ~ m^{-2} ~ s^{-1}),
main = "Photosynthetic Radiation - AmeriFlux US-Goo (2003-12)",
)
lines(flux12.ppfd,col = 'black')
legend(500, 1050, legend=c("Gap-filled", "Original"), col=c('red', 'black'), lty = c(2,1))
# Plot the data w/ gaps
options(repr.plot.width=14, repr.plot.height=6, repr.plot.res = 125)
plot(
filled.df,
type = 'l',
lty = 2,
col = 'red',
xlab = "Half-hourly samples",
ylab = bquote("PPFD " ~ mu ~ "mol" ~ m^{-2} ~ s^{-1}),
main = "Photosynthetic Radiation - AmeriFlux US-Goo (2003-12)",
)
lines(flux12.ppfd,col = 'black')
legend(550, 1050, legend=c("Gap-filled", "Original"), col=c('red', 'black'), lty = c(2,1))
# Plot the data w/ gaps
options(repr.plot.width=14, repr.plot.height=6, repr.plot.res = 125)
plot(
filled.df,
type = 'l',
lty = 2,
col = 'red',
xlab = "Half-hourly samples",
ylab = bquote("PPFD " ~ mu ~ "mol" ~ m^{-2} ~ s^{-1}),
main = "Photosynthetic Radiation - AmeriFlux US-Goo (2003-12)",
)
lines(flux12.ppfd,col = 'black')
legend(625, 1050, legend=c("Gap-filled", "Original"), col=c('red', 'black'), lty = c(2,1))
# Plot the data w/ and w/o gaps
options(repr.plot.width=14, repr.plot.height=6, repr.plot.res = 125)
plot(
filled.df,
type = 'l',
lty = 2,
col = 'red',
xlab = "Half-hourly samples",
ylab = bquote("PPFD " ~ mu ~ "mol" ~ m^{-2} ~ s^{-1}),
main = "Photosynthetic Radiation - AmeriFlux US-Goo (2003-12)",
)
lines(flux12.ppfd,col = 'blue')
legend(625, 1050, legend=c("Gap-filled", "Original"), col=c('red', 'blue'), lty = c(2,1))
# Plot the data w/ and w/o gaps
options(repr.plot.width=14, repr.plot.height=6, repr.plot.res = 125)
plot(
filled.df,
type = 'l',
lty = 2,
col = 'red',
xlab = "Half-hourly samples",
ylab = bquote("PPFD " ~ mu ~ "mol" ~ m^{-2} ~ s^{-1}),
main = "Photosynthetic Radiation - AmeriFlux US-Goo (2003-12)",
)
lines(flux12.ppfd,col = 'blue')
legend(625, 1050, legend=c("Gap-filled", "Original"), col=c('red', 'blue'), lty = c(2,1))
# Plot the data w/ and w/o gaps
options(repr.plot.width=14, repr.plot.height=6, repr.plot.res = 125)
plot(
filled.df,
type = 'l',
lty = 2,
col = 'red',
xlab = "Half-hourly samples",
ylab = bquote("PPFD " ~ mu ~ "mol" ~ m^{-2} ~ s^{-1}),
main = "Photosynthetic Radiation - AmeriFlux US-Goo (2003-12)",
)
lines(flux12.ppfd,col = 'blue')
legend(625, 1050, legend=c("Gap-filled", "Original"), col=c('red', 'blue'), lty = c(2,1))
savehistory('johnhennin_b2_exercise2.Rhistory')
